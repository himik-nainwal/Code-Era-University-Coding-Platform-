[
 {
  "**********": "1. Two Sum"
 },
 null,
 {
  "**********": "**********Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target."
 },
 {
  "**********": "You may assume that each input would have exactly one solution, and you may not use the same element twice."
 },
 {
  "**********": "You can return the answer in any order."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [2,7,11,15], target = 9Output: [0,1]Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].Example 2:"
 },
 {
  "**********": "Input: nums = [3,2,4], target = 6Output: [1,2]Example 3:"
 },
 {
  "**********": "Input: nums = [3,3], target = 6Output: [0,1]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "2 <= nums.length <= 104"
 },
 {
  "**********": "-109 <= nums[i] <= 109"
 },
 {
  "**********": "-109 <= target <= 109"
 },
 {
  "**********": "Only one valid answer exists."
 },
 {
  "**********": "Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?"
 },
 {
  "**********": "********************9. Palindrome Number"
 },
 null,
 {
  "**********": "********************Given an integer x, return true if x is palindrome integer."
 },
 {
  "**********": "An integer is a palindrome when it reads the same backward as forward."
 },
 {
  "**********": "For example, 121 is a palindrome while 123 is not."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: x = 121Output: trueExplanation: 121 reads as 121 from left to right and from right to left.Example 2:"
 },
 {
  "**********": "Input: x = -121Output: falseExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.Example 3:"
 },
 {
  "**********": "Input: x = 10Output: falseExplanation: Reads 01 from right to left. Therefore it is not a palindrome."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "-231 <= x <= 231 - 1"
 },
 {
  "**********": "Follow up: Could you solve it without converting the integer to a string?"
 },
 {
  "**********": "********************13. Roman to Integer"
 },
 null,
 {
  "**********": "********************Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M."
 },
 {
  "**********": "SymbolValueI             1V             5X             10L             50C             100D             500M             1000For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II."
 },
 {
  "**********": "Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:"
 },
 {
  "**********": "I can be placed before V (5) and X (10) to make 4 and 9. "
 },
 {
  "**********": "X can be placed before L (50) and C (100) to make 40 and 90. "
 },
 {
  "**********": "C can be placed before D (500) and M (1000) to make 400 and 900."
 },
 {
  "**********": "Given a roman numeral, convert it to an integer."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"III\"Output: 3Explanation: III = 3.Example 2:"
 },
 {
  "**********": "Input: s = \"LVIII\"Output: 58Explanation: L = 50, V= 5, III = 3.Example 3:"
 },
 {
  "**********": "Input: s = \"MCMXCIV\"Output: 1994Explanation: M = 1000, CM = 900, XC = 90 and IV = 4."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 15"
 },
 {
  "**********": "s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M')."
 },
 {
  "**********": "It is guaranteed that s is a valid roman numeral in the range [1, 3999]."
 },
 {
  "**********": "*************************14. Longest Common Prefix"
 },
 null,
 {
  "**********": "*************************Write a function to find the longest common prefix string amongst an array of strings."
 },
 {
  "**********": "If there is no common prefix, return an empty string \"\"."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: strs = [\"flower\",\"flow\",\"flight\"]Output: \"fl\"Example 2:"
 },
 {
  "**********": "Input: strs = [\"dog\",\"racecar\",\"car\"]Output: \"\"Explanation: There is no common prefix among the input strings."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= strs.length <= 200"
 },
 {
  "**********": "0 <= strs[i].length <= 200"
 },
 {
  "**********": "strs[i] consists of only lowercase English letters."
 },
 {
  "**********": "*********************20. Valid Parentheses"
 },
 null,
 {
  "**********": "*********************Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid."
 },
 {
  "**********": "An input string is valid if:"
 },
 {
  "**********": "1. Open brackets must be closed by the same type of brackets."
 },
 {
  "**********": "2. Open brackets must be closed in the correct order."
 },
 {
  "**********": "3. Every close bracket has a corresponding open bracket of the same type."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"()\"Output: trueExample 2:"
 },
 {
  "**********": "Input: s = \"()[]{}\"Output: trueExample 3:"
 },
 {
  "**********": "Input: s = \"(]\"Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 104"
 },
 {
  "**********": "s consists of parentheses only '()[]{}'."
 },
 {
  "**********": "**************************21. Merge Two Sorted Lists"
 },
 null,
 {
  "**********": "**************************You are given the heads of two sorted linked lists list1 and list2."
 },
 {
  "**********": "Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists."
 },
 {
  "**********": "Return the head of the merged linked list."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: list1 = [1,2,4], list2 = [1,3,4]Output: [1,1,2,3,4,4]Example 2:"
 },
 {
  "**********": "Input: list1 = [], list2 = []Output: []Example 3:"
 },
 {
  "**********": "Input: list1 = [], list2 = [0]Output: [0]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in both lists is in the range [0, 50]."
 },
 {
  "**********": "-100 <= Node.val <= 100"
 },
 {
  "**********": "Both list1 and list2 are sorted in non-decreasing order."
 },
 {
  "**********": "***************************************26. Remove Duplicates from Sorted Array"
 },
 null,
 {
  "**********": "***************************************Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same."
 },
 {
  "**********": "Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements."
 },
 {
  "**********": "Return k after placing the final result in the first k slots of nums."
 },
 {
  "**********": "Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory."
 },
 {
  "**********": "Custom Judge:"
 },
 {
  "**********": "The judge will test your solution with the following code:"
 },
 {
  "**********": "int[] nums = [...]; \/\/ Input arrayint[] expectedNums = [...]; \/\/ The expected answer with correct length\nint k = removeDuplicates(nums); \/\/ Calls your implementation\nassert k == expectedNums.length;for (int i = 0; i < k; i++) { assert nums[i] == expectedNums[i];}If all assertions pass, then your solution will be accepted."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,1,2]Output: 2, nums = [1,2,_]Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.It does not matter what you leave beyond the returned k (hence they are underscores).Example 2:"
 },
 {
  "**********": "Input: nums = [0,0,1,1,1,2,2,3,3,4]Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.It does not matter what you leave beyond the returned k (hence they are underscores)."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 3 * 104"
 },
 {
  "**********": "-100 <= nums[i] <= 100"
 },
 {
  "**********": "nums is sorted in non-decreasing order."
 },
 {
  "**********": "******************27. Remove Element"
 },
 null,
 {
  "**********": "******************Given an integer array nums and an integer val, remove all occurrences of val in numsin-place. The relative order of the elements may be changed."
 },
 {
  "**********": "Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements."
 },
 {
  "**********": "Return k after placing the final result in the first k slots of nums."
 },
 {
  "**********": "Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory."
 },
 {
  "**********": "Custom Judge:"
 },
 {
  "**********": "The judge will test your solution with the following code:"
 },
 {
  "**********": "int[] nums = [...]; \/\/ Input arrayint val = ...; \/\/ Value to removeint[] expectedNums = [...]; \/\/ The expected answer with correct length. \/\/ It is sorted with no values equaling val.\nint k = removeElement(nums, val); \/\/ Calls your implementation\nassert k == expectedNums.length;sort(nums, 0, k); \/\/ Sort the first k elements of numsfor (int i = 0; i < actualLength; i++) { assert nums[i] == expectedNums[i];}If all assertions pass, then your solution will be accepted."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [3,2,2,3], val = 3Output: 2, nums = [2,2,_,_]Explanation: Your function should return k = 2, with the first two elements of nums being 2.It does not matter what you leave beyond the returned k (hence they are underscores).Example 2:"
 },
 {
  "**********": "Input: nums = [0,1,2,2,3,0,4,2], val = 2Output: 5, nums = [0,1,4,0,3,_,_,_]Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.Note that the five elements can be returned in any order.It does not matter what you leave beyond the returned k (hence they are underscores)."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= nums.length <= 100"
 },
 {
  "**********": "0 <= nums[i] <= 50"
 },
 {
  "**********": "0 <= val <= 100"
 },
 {
  "**********": "**************************35. Search Insert Position"
 },
 null,
 {
  "**********": "**************************Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order."
 },
 {
  "**********": "You must write an algorithm with O(log n) runtime complexity."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,3,5,6], target = 5Output: 2Example 2:"
 },
 {
  "**********": "Input: nums = [1,3,5,6], target = 2Output: 1Example 3:"
 },
 {
  "**********": "Input: nums = [1,3,5,6], target = 7Output: 4"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 104"
 },
 {
  "**********": "-104 <= nums[i] <= 104"
 },
 {
  "**********": "nums contains distinct values sorted in ascending order."
 },
 {
  "**********": "-104 <= target <= 104"
 },
 {
  "**********": "***********************58. Length of Last Word"
 },
 null,
 {
  "**********": "***********************Given a string s consisting of words and spaces, return the length of the last word in the string."
 },
 {
  "**********": "A word is a maximal substring consisting of non-space characters only."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"Hello World\"Output: 5Explanation: The last word is \"World\" with length 5.Example 2:"
 },
 {
  "**********": "Input: s = \"   fly me   to   the moon  \"Output: 4Explanation: The last word is \"moon\" with length 4.Example 3:"
 },
 {
  "**********": "Input: s = \"luffy is still joyboy\"Output: 6Explanation: The last word is \"joyboy\" with length 6."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 104"
 },
 {
  "**********": "s consists of only English letters and spaces ' '."
 },
 {
  "**********": "There will be at least one word in s."
 },
 {
  "**********": "************66. Plus One"
 },
 null,
 {
  "**********": "************You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's."
 },
 {
  "**********": "Increment the large integer by one and return the resulting array of digits."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: digits = [1,2,3]Output: [1,2,4]Explanation: The array represents the integer 123.Incrementing by one gives 123 + 1 = 124.Thus, the result should be [1,2,4].Example 2:"
 },
 {
  "**********": "Input: digits = [4,3,2,1]Output: [4,3,2,2]Explanation: The array represents the integer 4321.Incrementing by one gives 4321 + 1 = 4322.Thus, the result should be [4,3,2,2].Example 3:"
 },
 {
  "**********": "Input: digits = [9]Output: [1,0]Explanation: The array represents the integer 9.Incrementing by one gives 9 + 1 = 10.Thus, the result should be [1,0]."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= digits.length <= 100"
 },
 {
  "**********": "0 <= digits[i] <= 9"
 },
 {
  "**********": "digits does not contain any leading 0's."
 },
 {
  "**********": "**************67. Add Binary"
 },
 null,
 {
  "**********": "**************Given two binary strings a and b, return their sum as a binary string."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: a = \"11\", b = \"1\"Output: \"100\"Example 2:"
 },
 {
  "**********": "Input: a = \"1010\", b = \"1011\"Output: \"10101\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= a.length, b.length <= 104"
 },
 {
  "**********": "a and b consist only of '0' or '1' characters."
 },
 {
  "**********": "Each string does not contain leading zeros except for the zero itself."
 },
 {
  "**********": "***********69. Sqrt(x)"
 },
 null,
 {
  "**********": "***********Given a non-negative integer x, compute and return the square root ofx."
 },
 {
  "**********": "Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned."
 },
 {
  "**********": "Note: You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: x = 4Output: 2Example 2:"
 },
 {
  "**********": "Input: x = 8Output: 2Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= x <= 231 - 1"
 },
 {
  "**********": "*******************70. Climbing Stairs"
 },
 null,
 {
  "**********": "*******************You are climbing a staircase. It takes n steps to reach the top."
 },
 {
  "**********": "Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?"
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 2Output: 2Explanation: There are two ways to climb to the top.1. 1 step + 1 step2. 2 stepsExample 2:"
 },
 {
  "**********": "Input: n = 3Output: 3Explanation: There are three ways to climb to the top.1. 1 step + 1 step + 1 step2. 1 step + 2 steps3. 2 steps + 1 step"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 45"
 },
 {
  "**********": "**************************************83. Remove Duplicates from Sorted List"
 },
 null,
 {
  "**********": "**************************************Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: head = [1,1,2]Output: [1,2]Example 2:"
 },
 {
  "**********": "Input: head = [1,1,2,3,3]Output: [1,2,3]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the list is in the range [0, 300]."
 },
 {
  "**********": "-100 <= Node.val <= 100"
 },
 {
  "**********": "The list is guaranteed to be sorted in ascending order."
 },
 {
  "**********": "**********************88. Merge Sorted Array"
 },
 null,
 {
  "**********": "**********************You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively."
 },
 {
  "**********": "Mergenums1 and nums2 into a single array sorted in non-decreasing order."
 },
 {
  "**********": "The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3Output: [1,2,2,3,5,6]Explanation: The arrays we are merging are [1,2,3] and [2,5,6].The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.Example 2:"
 },
 {
  "**********": "Input: nums1 = [1], m = 1, nums2 = [], n = 0Output: [1]Explanation: The arrays we are merging are [1] and [].The result of the merge is [1].Example 3:"
 },
 {
  "**********": "Input: nums1 = [0], m = 0, nums2 = [1], n = 1Output: [1]Explanation: The arrays we are merging are [] and [1].The result of the merge is [1].Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "nums1.length == m + n"
 },
 {
  "**********": "nums2.length == n"
 },
 {
  "**********": "0 <= m, n <= 200"
 },
 {
  "**********": "1 <= m + n <= 200"
 },
 {
  "**********": "-109 <= nums1[i], nums2[j] <= 109"
 },
 null,
 {
  "**********": "Follow up: Can you come up with an algorithm that runs in O(m + n) time?"
 },
 {
  "**********": "*********************************94. Binary Tree Inorder Traversal"
 },
 null,
 {
  "**********": "*********************************Given the root of a binary tree, return the inorder traversal of its nodes' values."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [1,null,2,3]Output: [1,3,2]Example 2:"
 },
 {
  "**********": "Input: root = []Output: []Example 3:"
 },
 {
  "**********": "Input: root = [1]Output: [1]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [0, 100]."
 },
 {
  "**********": "-100 <= Node.val <= 100"
 },
 {
  "**********": "Follow up: Recursive solution is trivial, could you do it iteratively?"
 },
 {
  "**********": "**************100. Same Tree"
 },
 null,
 {
  "**********": "**************Given the roots of two binary trees p and q, write a function to check if they are the same or not."
 },
 {
  "**********": "Two binary trees are considered the same if they are structurally identical, and the nodes have the same value."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: p = [1,2,3], q = [1,2,3]Output: trueExample 2:"
 },
 {
  "**********": "Input: p = [1,2], q = [1,null,2]Output: falseExample 3:"
 },
 {
  "**********": "Input: p = [1,2,1], q = [1,1,2]Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in both trees is in the range [0, 100]."
 },
 {
  "**********": "-104 <= Node.val <= 104"
 },
 {
  "**********": "*******************101. Symmetric Tree"
 },
 null,
 {
  "**********": "*******************Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center)."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [1,2,2,3,4,4,3]Output: trueExample 2:"
 },
 {
  "**********": "Input: root = [1,2,2,null,3,null,3]Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [1, 1000]."
 },
 {
  "**********": "-100 <= Node.val <= 100"
 },
 {
  "**********": "Follow up: Could you solve it both recursively and iteratively?"
 },
 {
  "**********": "*********************************104. Maximum Depth of Binary Tree"
 },
 null,
 {
  "**********": "*********************************Given the root of a binary tree, return its maximum depth."
 },
 {
  "**********": "A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [3,9,20,null,null,15,7]Output: 3Example 2:"
 },
 {
  "**********": "Input: root = [1,null,2]Output: 2"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [0, 104]."
 },
 {
  "**********": "-100 <= Node.val <= 100"
 },
 {
  "**********": "***********************************************108. Convert Sorted Array to Binary Search Tree"
 },
 null,
 {
  "**********": "***********************************************Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree."
 },
 {
  "**********": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [-10,-3,0,5,9]Output: [0,-3,9,-10,null,5]Explanation: [0,-10,5,null,-3,null,9] is also accepted:Example 2:"
 },
 {
  "**********": "Input: nums = [1,3]Output: [3,1]Explanation: [1,null,3] and [3,1] are both height-balanced BSTs."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 104"
 },
 {
  "**********": "-104 <= nums[i] <= 104"
 },
 {
  "**********": "nums is sorted in a strictly increasing order."
 },
 {
  "**********": "*************************110. Balanced Binary Tree"
 },
 null,
 {
  "**********": "*************************Given a binary tree, determine if it is height-balanced."
 },
 {
  "**********": "For this problem, a height-balanced binary tree is defined as:"
 },
 {
  "**********": "a binary tree in which the left and right subtrees of every node differ in height by no more than 1."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [3,9,20,null,null,15,7]Output: trueExample 2:"
 },
 {
  "**********": "Input: root = [1,2,2,3,3,null,null,4,4]Output: falseExample 3:"
 },
 {
  "**********": "Input: root = []Output: true"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [0, 5000]."
 },
 {
  "**********": "-104 <= Node.val <= 104"
 },
 {
  "**********": "**********1. Two Sum"
 },
 null,
 {
  "**********": "**********Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target."
 },
 {
  "**********": "You may assume that each input would have exactly one solution, and you may not use the same element twice."
 },
 {
  "**********": "You can return the answer in any order."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [2,7,11,15], target = 9Output: [0,1]Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].Example 2:"
 },
 {
  "**********": "Input: nums = [3,2,4], target = 6Output: [1,2]Example 3:"
 },
 {
  "**********": "Input: nums = [3,3], target = 6Output: [0,1]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "2 <= nums.length <= 104"
 },
 {
  "**********": "-109 <= nums[i] <= 109"
 },
 {
  "**********": "-109 <= target <= 109"
 },
 {
  "**********": "Only one valid answer exists."
 },
 {
  "**********": "Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?"
 },
 {
  "**********": "********************9. Palindrome Number"
 },
 null,
 {
  "**********": "********************Given an integer x, return true if x is palindrome integer."
 },
 {
  "**********": "An integer is a palindrome when it reads the same backward as forward."
 },
 {
  "**********": "For example, 121 is a palindrome while 123 is not."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: x = 121Output: trueExplanation: 121 reads as 121 from left to right and from right to left.Example 2:"
 },
 {
  "**********": "Input: x = -121Output: falseExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.Example 3:"
 },
 {
  "**********": "Input: x = 10Output: falseExplanation: Reads 01 from right to left. Therefore it is not a palindrome."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "-231 <= x <= 231 - 1"
 },
 {
  "**********": "Follow up: Could you solve it without converting the integer to a string?"
 },
 {
  "**********": "********************13. Roman to Integer"
 },
 null,
 {
  "**********": "********************Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M."
 },
 {
  "**********": "SymbolValueI             1V             5X             10L             50C             100D             500M             1000For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II."
 },
 {
  "**********": "Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:"
 },
 {
  "**********": "I can be placed before V (5) and X (10) to make 4 and 9. "
 },
 {
  "**********": "X can be placed before L (50) and C (100) to make 40 and 90. "
 },
 {
  "**********": "C can be placed before D (500) and M (1000) to make 400 and 900."
 },
 {
  "**********": "Given a roman numeral, convert it to an integer."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"III\"Output: 3Explanation: III = 3.Example 2:"
 },
 {
  "**********": "Input: s = \"LVIII\"Output: 58Explanation: L = 50, V= 5, III = 3.Example 3:"
 },
 {
  "**********": "Input: s = \"MCMXCIV\"Output: 1994Explanation: M = 1000, CM = 900, XC = 90 and IV = 4."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 15"
 },
 {
  "**********": "s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M')."
 },
 {
  "**********": "It is guaranteed that s is a valid roman numeral in the range [1, 3999]."
 },
 {
  "**********": "*************************14. Longest Common Prefix"
 },
 null,
 {
  "**********": "*************************Write a function to find the longest common prefix string amongst an array of strings."
 },
 {
  "**********": "If there is no common prefix, return an empty string \"\"."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: strs = [\"flower\",\"flow\",\"flight\"]Output: \"fl\"Example 2:"
 },
 {
  "**********": "Input: strs = [\"dog\",\"racecar\",\"car\"]Output: \"\"Explanation: There is no common prefix among the input strings."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= strs.length <= 200"
 },
 {
  "**********": "0 <= strs[i].length <= 200"
 },
 {
  "**********": "strs[i] consists of only lowercase English letters."
 },
 {
  "**********": "*********************20. Valid Parentheses"
 },
 null,
 {
  "**********": "*********************Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid."
 },
 {
  "**********": "An input string is valid if:"
 },
 {
  "**********": "1. Open brackets must be closed by the same type of brackets."
 },
 {
  "**********": "2. Open brackets must be closed in the correct order."
 },
 {
  "**********": "3. Every close bracket has a corresponding open bracket of the same type."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"()\"Output: trueExample 2:"
 },
 {
  "**********": "Input: s = \"()[]{}\"Output: trueExample 3:"
 },
 {
  "**********": "Input: s = \"(]\"Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 104"
 },
 {
  "**********": "s consists of parentheses only '()[]{}'."
 },
 {
  "**********": "**************************21. Merge Two Sorted Lists"
 },
 null,
 {
  "**********": "**************************You are given the heads of two sorted linked lists list1 and list2."
 },
 {
  "**********": "Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists."
 },
 {
  "**********": "Return the head of the merged linked list."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: list1 = [1,2,4], list2 = [1,3,4]Output: [1,1,2,3,4,4]Example 2:"
 },
 {
  "**********": "Input: list1 = [], list2 = []Output: []Example 3:"
 },
 {
  "**********": "Input: list1 = [], list2 = [0]Output: [0]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in both lists is in the range [0, 50]."
 },
 {
  "**********": "-100 <= Node.val <= 100"
 },
 {
  "**********": "Both list1 and list2 are sorted in non-decreasing order."
 },
 {
  "**********": "***************************************26. Remove Duplicates from Sorted Array"
 },
 null,
 {
  "**********": "***************************************Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same."
 },
 {
  "**********": "Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements."
 },
 {
  "**********": "Return k after placing the final result in the first k slots of nums."
 },
 {
  "**********": "Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory."
 },
 {
  "**********": "Custom Judge:"
 },
 {
  "**********": "The judge will test your solution with the following code:"
 },
 {
  "**********": "int[] nums = [...]; \/\/ Input arrayint[] expectedNums = [...]; \/\/ The expected answer with correct length\nint k = removeDuplicates(nums); \/\/ Calls your implementation\nassert k == expectedNums.length;for (int i = 0; i < k; i++) { assert nums[i] == expectedNums[i];}If all assertions pass, then your solution will be accepted."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,1,2]Output: 2, nums = [1,2,_]Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.It does not matter what you leave beyond the returned k (hence they are underscores).Example 2:"
 },
 {
  "**********": "Input: nums = [0,0,1,1,1,2,2,3,3,4]Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.It does not matter what you leave beyond the returned k (hence they are underscores)."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 3 * 104"
 },
 {
  "**********": "-100 <= nums[i] <= 100"
 },
 {
  "**********": "nums is sorted in non-decreasing order."
 },
 {
  "**********": "******************27. Remove Element"
 },
 null,
 {
  "**********": "******************Given an integer array nums and an integer val, remove all occurrences of val in numsin-place. The relative order of the elements may be changed."
 },
 {
  "**********": "Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements."
 },
 {
  "**********": "Return k after placing the final result in the first k slots of nums."
 },
 {
  "**********": "Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory."
 },
 {
  "**********": "Custom Judge:"
 },
 {
  "**********": "The judge will test your solution with the following code:"
 },
 {
  "**********": "int[] nums = [...]; \/\/ Input arrayint val = ...; \/\/ Value to removeint[] expectedNums = [...]; \/\/ The expected answer with correct length. \/\/ It is sorted with no values equaling val.\nint k = removeElement(nums, val); \/\/ Calls your implementation\nassert k == expectedNums.length;sort(nums, 0, k); \/\/ Sort the first k elements of numsfor (int i = 0; i < actualLength; i++) { assert nums[i] == expectedNums[i];}If all assertions pass, then your solution will be accepted."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [3,2,2,3], val = 3Output: 2, nums = [2,2,_,_]Explanation: Your function should return k = 2, with the first two elements of nums being 2.It does not matter what you leave beyond the returned k (hence they are underscores).Example 2:"
 },
 {
  "**********": "Input: nums = [0,1,2,2,3,0,4,2], val = 2Output: 5, nums = [0,1,4,0,3,_,_,_]Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.Note that the five elements can be returned in any order.It does not matter what you leave beyond the returned k (hence they are underscores)."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= nums.length <= 100"
 },
 {
  "**********": "0 <= nums[i] <= 50"
 },
 {
  "**********": "0 <= val <= 100"
 },
 {
  "**********": "**************************35. Search Insert Position"
 },
 null,
 {
  "**********": "**************************Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order."
 },
 {
  "**********": "You must write an algorithm with O(log n) runtime complexity."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,3,5,6], target = 5Output: 2Example 2:"
 },
 {
  "**********": "Input: nums = [1,3,5,6], target = 2Output: 1Example 3:"
 },
 {
  "**********": "Input: nums = [1,3,5,6], target = 7Output: 4"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 104"
 },
 {
  "**********": "-104 <= nums[i] <= 104"
 },
 {
  "**********": "nums contains distinct values sorted in ascending order."
 },
 {
  "**********": "-104 <= target <= 104"
 },
 {
  "**********": "***********************58. Length of Last Word"
 },
 null,
 {
  "**********": "***********************Given a string s consisting of words and spaces, return the length of the last word in the string."
 },
 {
  "**********": "A word is a maximal substring consisting of non-space characters only."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"Hello World\"Output: 5Explanation: The last word is \"World\" with length 5.Example 2:"
 },
 {
  "**********": "Input: s = \"   fly me   to   the moon  \"Output: 4Explanation: The last word is \"moon\" with length 4.Example 3:"
 },
 {
  "**********": "Input: s = \"luffy is still joyboy\"Output: 6Explanation: The last word is \"joyboy\" with length 6."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 104"
 },
 {
  "**********": "s consists of only English letters and spaces ' '."
 },
 {
  "**********": "There will be at least one word in s."
 },
 {
  "**********": "************66. Plus One"
 },
 null,
 {
  "**********": "************You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's."
 },
 {
  "**********": "Increment the large integer by one and return the resulting array of digits."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: digits = [1,2,3]Output: [1,2,4]Explanation: The array represents the integer 123.Incrementing by one gives 123 + 1 = 124.Thus, the result should be [1,2,4].Example 2:"
 },
 {
  "**********": "Input: digits = [4,3,2,1]Output: [4,3,2,2]Explanation: The array represents the integer 4321.Incrementing by one gives 4321 + 1 = 4322.Thus, the result should be [4,3,2,2].Example 3:"
 },
 {
  "**********": "Input: digits = [9]Output: [1,0]Explanation: The array represents the integer 9.Incrementing by one gives 9 + 1 = 10.Thus, the result should be [1,0]."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= digits.length <= 100"
 },
 {
  "**********": "0 <= digits[i] <= 9"
 },
 {
  "**********": "digits does not contain any leading 0's."
 },
 {
  "**********": "**************67. Add Binary"
 },
 null,
 {
  "**********": "**************Given two binary strings a and b, return their sum as a binary string."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: a = \"11\", b = \"1\"Output: \"100\"Example 2:"
 },
 {
  "**********": "Input: a = \"1010\", b = \"1011\"Output: \"10101\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= a.length, b.length <= 104"
 },
 {
  "**********": "a and b consist only of '0' or '1' characters."
 },
 {
  "**********": "Each string does not contain leading zeros except for the zero itself."
 },
 {
  "**********": "***********69. Sqrt(x)"
 },
 null,
 {
  "**********": "***********Given a non-negative integer x, compute and return the square root ofx."
 },
 {
  "**********": "Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned."
 },
 {
  "**********": "Note: You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: x = 4Output: 2Example 2:"
 },
 {
  "**********": "Input: x = 8Output: 2Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= x <= 231 - 1"
 },
 {
  "**********": "*******************70. Climbing Stairs"
 },
 null,
 {
  "**********": "*******************You are climbing a staircase. It takes n steps to reach the top."
 },
 {
  "**********": "Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?"
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 2Output: 2Explanation: There are two ways to climb to the top.1. 1 step + 1 step2. 2 stepsExample 2:"
 },
 {
  "**********": "Input: n = 3Output: 3Explanation: There are three ways to climb to the top.1. 1 step + 1 step + 1 step2. 1 step + 2 steps3. 2 steps + 1 step"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 45"
 },
 {
  "**********": "**************************************83. Remove Duplicates from Sorted List"
 },
 null,
 {
  "**********": "**************************************Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: head = [1,1,2]Output: [1,2]Example 2:"
 },
 {
  "**********": "Input: head = [1,1,2,3,3]Output: [1,2,3]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the list is in the range [0, 300]."
 },
 {
  "**********": "-100 <= Node.val <= 100"
 },
 {
  "**********": "The list is guaranteed to be sorted in ascending order."
 },
 {
  "**********": "**********************88. Merge Sorted Array"
 },
 null,
 {
  "**********": "**********************You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively."
 },
 {
  "**********": "Mergenums1 and nums2 into a single array sorted in non-decreasing order."
 },
 {
  "**********": "The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3Output: [1,2,2,3,5,6]Explanation: The arrays we are merging are [1,2,3] and [2,5,6].The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.Example 2:"
 },
 {
  "**********": "Input: nums1 = [1], m = 1, nums2 = [], n = 0Output: [1]Explanation: The arrays we are merging are [1] and [].The result of the merge is [1].Example 3:"
 },
 {
  "**********": "Input: nums1 = [0], m = 0, nums2 = [1], n = 1Output: [1]Explanation: The arrays we are merging are [] and [1].The result of the merge is [1].Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "nums1.length == m + n"
 },
 {
  "**********": "nums2.length == n"
 },
 {
  "**********": "0 <= m, n <= 200"
 },
 {
  "**********": "1 <= m + n <= 200"
 },
 {
  "**********": "-109 <= nums1[i], nums2[j] <= 109"
 },
 null,
 {
  "**********": "Follow up: Can you come up with an algorithm that runs in O(m + n) time?"
 },
 {
  "**********": "*********************************94. Binary Tree Inorder Traversal"
 },
 null,
 {
  "**********": "*********************************Given the root of a binary tree, return the inorder traversal of its nodes' values."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [1,null,2,3]Output: [1,3,2]Example 2:"
 },
 {
  "**********": "Input: root = []Output: []Example 3:"
 },
 {
  "**********": "Input: root = [1]Output: [1]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [0, 100]."
 },
 {
  "**********": "-100 <= Node.val <= 100"
 },
 {
  "**********": "Follow up: Recursive solution is trivial, could you do it iteratively?"
 },
 {
  "**********": "**************100. Same Tree"
 },
 null,
 {
  "**********": "**************Given the roots of two binary trees p and q, write a function to check if they are the same or not."
 },
 {
  "**********": "Two binary trees are considered the same if they are structurally identical, and the nodes have the same value."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: p = [1,2,3], q = [1,2,3]Output: trueExample 2:"
 },
 {
  "**********": "Input: p = [1,2], q = [1,null,2]Output: falseExample 3:"
 },
 {
  "**********": "Input: p = [1,2,1], q = [1,1,2]Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in both trees is in the range [0, 100]."
 },
 {
  "**********": "-104 <= Node.val <= 104"
 },
 {
  "**********": "*******************101. Symmetric Tree"
 },
 null,
 {
  "**********": "*******************Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center)."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [1,2,2,3,4,4,3]Output: trueExample 2:"
 },
 {
  "**********": "Input: root = [1,2,2,null,3,null,3]Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [1, 1000]."
 },
 {
  "**********": "-100 <= Node.val <= 100"
 },
 {
  "**********": "Follow up: Could you solve it both recursively and iteratively?"
 },
 {
  "**********": "*********************************104. Maximum Depth of Binary Tree"
 },
 null,
 {
  "**********": "*********************************Given the root of a binary tree, return its maximum depth."
 },
 {
  "**********": "A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [3,9,20,null,null,15,7]Output: 3Example 2:"
 },
 {
  "**********": "Input: root = [1,null,2]Output: 2"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [0, 104]."
 },
 {
  "**********": "-100 <= Node.val <= 100"
 },
 {
  "**********": "***********************************************108. Convert Sorted Array to Binary Search Tree"
 },
 null,
 {
  "**********": "***********************************************Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree."
 },
 {
  "**********": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [-10,-3,0,5,9]Output: [0,-3,9,-10,null,5]Explanation: [0,-10,5,null,-3,null,9] is also accepted:Example 2:"
 },
 {
  "**********": "Input: nums = [1,3]Output: [3,1]Explanation: [1,null,3] and [3,1] are both height-balanced BSTs."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 104"
 },
 {
  "**********": "-104 <= nums[i] <= 104"
 },
 {
  "**********": "nums is sorted in a strictly increasing order."
 },
 {
  "**********": "*************************110. Balanced Binary Tree"
 },
 null,
 {
  "**********": "*************************Given a binary tree, determine if it is height-balanced."
 },
 {
  "**********": "For this problem, a height-balanced binary tree is defined as:"
 },
 {
  "**********": "a binary tree in which the left and right subtrees of every node differ in height by no more than 1."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [3,9,20,null,null,15,7]Output: trueExample 2:"
 },
 {
  "**********": "Input: root = [1,2,2,3,3,null,null,4,4]Output: falseExample 3:"
 },
 {
  "**********": "Input: root = []Output: true"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [0, 5000]."
 },
 {
  "**********": "-104 <= Node.val <= 104"
 },
 {
  "**********": "*********************************111. Minimum Depth of Binary Tree"
 },
 null,
 {
  "**********": "*********************************Given a binary tree, find its minimum depth."
 },
 {
  "**********": "The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node."
 },
 {
  "**********": "Note: A leaf is a node with no children."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [3,9,20,null,null,15,7]Output: 2Example 2:"
 },
 {
  "**********": "Input: root = [2,null,3,null,4,null,5,null,6]Output: 5"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [0, 105]."
 },
 {
  "**********": "-1000 <= Node.val <= 1000"
 },
 {
  "**********": "*************112. Path Sum"
 },
 null,
 {
  "**********": "*************Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum."
 },
 {
  "**********": "A leaf is a node with no children."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22Output: trueExplanation: The root-to-leaf path with the target sum is shown.Example 2:"
 },
 {
  "**********": "Input: root = [1,2,3], targetSum = 5Output: falseExplanation: There two root-to-leaf paths in the tree:(1 --> 2): The sum is 3.(1 --> 3): The sum is 4.There is no root-to-leaf path with sum = 5.Example 3:"
 },
 {
  "**********": "Input: root = [], targetSum = 0Output: falseExplanation: Since the tree is empty, there are no root-to-leaf paths."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [0, 5000]."
 },
 {
  "**********": "-1000 <= Node.val <= 1000"
 },
 {
  "**********": "-1000 <= targetSum <= 1000"
 },
 {
  "**********": "**********************118. Pascal's Triangle"
 },
 null,
 {
  "**********": "**********************Given an integer numRows, return the first numRows of Pascal's triangle."
 },
 {
  "**********": "In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:"
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: numRows = 5Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]Example 2:"
 },
 {
  "**********": "Input: numRows = 1Output: [[1]]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= numRows <= 30"
 },
 {
  "**********": "*************************119. Pascal's Triangle II"
 },
 null,
 {
  "**********": "*************************Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle."
 },
 {
  "**********": "In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:"
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: rowIndex = 3Output: [1,3,3,1]Example 2:"
 },
 {
  "**********": "Input: rowIndex = 0Output: [1]Example 3:"
 },
 {
  "**********": "Input: rowIndex = 1Output: [1,1]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= rowIndex <= 33"
 },
 null,
 {
  "**********": "Follow up: Could you optimize your algorithm to use only O(rowIndex) extra space?"
 },
 {
  "**********": "************************************121. Best Time to Buy and Sell Stock"
 },
 null,
 {
  "**********": "************************************You are given an array prices where prices[i] is the price of a given stock on the ith day."
 },
 {
  "**********": "You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock."
 },
 {
  "**********": "Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: prices = [7,1,5,3,6,4]Output: 5Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.Example 2:"
 },
 {
  "**********": "Input: prices = [7,6,4,3,1]Output: 0Explanation: In this case, no transactions are done and the max profit = 0."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= prices.length <= 105"
 },
 {
  "**********": "0 <= prices[i] <= 104"
 },
 {
  "**********": "*********************125. Valid Palindrome"
 },
 null,
 {
  "**********": "*********************A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers."
 },
 {
  "**********": "Given a string s, return true if it is a palindrome, or false otherwise."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"A man, a plan, a canal: Panama\"Output: trueExplanation: \"amanaplanacanalpanama\" is a palindrome.Example 2:"
 },
 {
  "**********": "Input: s = \"race a car\"Output: falseExplanation: \"raceacar\" is not a palindrome.Example 3:"
 },
 {
  "**********": "Input: s = \" \"Output: trueExplanation: s is an empty string \"\" after removing non-alphanumeric characters.Since an empty string reads the same forward and backward, it is a palindrome."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 2 * 105"
 },
 {
  "**********": "s consists only of printable ASCII characters."
 },
 {
  "**********": "******************136. Single Number"
 },
 null,
 {
  "**********": "******************Given a non-empty array of integers nums, every element appears twice except for one. Find that single one."
 },
 {
  "**********": "You must implement a solution with a linear runtime complexity and use only constant extra space."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [2,2,1]Output: 1Example 2:"
 },
 {
  "**********": "Input: nums = [4,1,2,1,2]Output: 4Example 3:"
 },
 {
  "**********": "Input: nums = [1]Output: 1"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 3 * 104"
 },
 {
  "**********": "-3 * 104 <= nums[i] <= 3 * 104"
 },
 {
  "**********": "Each element in the array appears twice except for one element which appears only once."
 },
 {
  "**********": "**********************141. Linked List Cycle"
 },
 null,
 {
  "**********": "**********************Given head, the head of a linked list, determine if the linked list has a cycle in it."
 },
 {
  "**********": "There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter."
 },
 {
  "**********": "Return true if there is a cycle in the linked list. Otherwise, return false."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: head = [3,2,0,-4], pos = 1Output: trueExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).Example 2:"
 },
 {
  "**********": "Input: head = [1,2], pos = 0Output: trueExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.Example 3:"
 },
 {
  "**********": "Input: head = [1], pos = -1Output: falseExplanation: There is no cycle in the linked list."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of the nodes in the list is in the range [0, 104]."
 },
 {
  "**********": "-105 <= Node.val <= 105"
 },
 {
  "**********": "pos is -1 or a valid index in the linked-list."
 },
 null,
 {
  "**********": "Follow up: Can you solve it using O(1) (i.e. constant) memory?"
 },
 {
  "**********": "***********************************144. Binary Tree Preorder Traversal"
 },
 null,
 {
  "**********": "***********************************Given the root of a binary tree, return the preorder traversal of its nodes' values."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [1,null,2,3]Output: [1,2,3]Example 2:"
 },
 {
  "**********": "Input: root = []Output: []Example 3:"
 },
 {
  "**********": "Input: root = [1]Output: [1]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [0, 100]."
 },
 {
  "**********": "-100 <= Node.val <= 100"
 },
 null,
 {
  "**********": "Follow up: Recursive solution is trivial, could you do it iteratively?"
 },
 {
  "**********": "************************************145. Binary Tree Postorder Traversal"
 },
 null,
 {
  "**********": "************************************Given the root of a binary tree, return the postorder traversal of its nodes' values."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [1,null,2,3]Output: [3,2,1]Example 2:"
 },
 {
  "**********": "Input: root = []Output: []Example 3:"
 },
 {
  "**********": "Input: root = [1]Output: [1]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of the nodes in the tree is in the range [0, 100]."
 },
 {
  "**********": "-100 <= Node.val <= 100"
 },
 {
  "**********": "Follow up: Recursive solution is trivial, could you do it iteratively?"
 },
 {
  "**********": "*************************************160. Intersection of Two Linked Lists"
 },
 null,
 {
  "**********": "*************************************Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null."
 },
 {
  "**********": "For example, the following two linked lists begin to intersect at node c1:"
 },
 {
  "**********": "The test cases are generated such that there are no cycles anywhere in the entire linked structure."
 },
 {
  "**********": "Note that the linked lists must retain their original structure after the function returns."
 },
 {
  "**********": "Custom Judge:"
 },
 {
  "**********": "The inputs to the judge are given as follows (your program is not given these inputs):"
 },
 {
  "**********": "intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node."
 },
 {
  "**********": "listA - The first linked list."
 },
 {
  "**********": "listB - The second linked list."
 },
 {
  "**********": "skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node."
 },
 {
  "**********": "skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node."
 },
 {
  "**********": "The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3Output: Intersected at '8'Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.Example 2:"
 },
 {
  "**********": "Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1Output: Intersected at '2'Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.Example 3:"
 },
 {
  "**********": "Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2Output: No intersectionExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.Explanation: The two lists do not intersect, so return null."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes of listA is in the m."
 },
 {
  "**********": "The number of nodes of listB is in the n."
 },
 {
  "**********": "1 <= m, n <= 3 * 104"
 },
 {
  "**********": "1 <= Node.val <= 105"
 },
 {
  "**********": "0 <= skipA < m"
 },
 {
  "**********": "0 <= skipB < n"
 },
 {
  "**********": "intersectVal is 0 if listA and listB do not intersect."
 },
 {
  "**********": "intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect."
 },
 {
  "**********": "Follow up: Could you write a solution that runs in O(m + n) time and use only O(1) memory?"
 },
 {
  "**********": "*****************************168. Excel Sheet Column Title"
 },
 null,
 {
  "**********": "*****************************Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet."
 },
 {
  "**********": "For example:"
 },
 {
  "**********": "A -> 1B -> 2C -> 3...Z -> 26AA -> 27AB -> 28 ..."
 },
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: columnNumber = 1Output: \"A\"Example 2:"
 },
 {
  "**********": "Input: columnNumber = 28Output: \"AB\"Example 3:"
 },
 {
  "**********": "Input: columnNumber = 701Output: \"ZY\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= columnNumber <= 231 - 1"
 },
 {
  "**********": "*********************169. Majority Element"
 },
 null,
 {
  "**********": "*********************Given an array nums of size n, return the majority element."
 },
 {
  "**********": "The majority element is the element that appears more than ⌊n \/ 2⌋ times. You may assume that the majority element always exists in the array."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [3,2,3]Output: 3Example 2:"
 },
 {
  "**********": "Input: nums = [2,2,1,1,1,2,2]Output: 2"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "n == nums.length"
 },
 {
  "**********": "1 <= n <= 5 * 104"
 },
 {
  "**********": "-109 <= nums[i] <= 109"
 },
 {
  "**********": "Follow-up: Could you solve the problem in linear time and in O(1) space?"
 },
 {
  "**********": "******************************171. Excel Sheet Column Number"
 },
 null,
 {
  "**********": "******************************Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number."
 },
 {
  "**********": "For example:"
 },
 {
  "**********": "A -> 1B -> 2C -> 3...Z -> 26AA -> 27AB -> 28 ..."
 },
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: columnTitle = \"A\"Output: 1Example 2:"
 },
 {
  "**********": "Input: columnTitle = \"AB\"Output: 28Example 3:"
 },
 {
  "**********": "Input: columnTitle = \"ZY\"Output: 701"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= columnTitle.length <= 7"
 },
 {
  "**********": "columnTitle consists only of uppercase English letters."
 },
 {
  "**********": "columnTitle is in the range [\"A\", \"FXSHRXW\"]."
 },
 {
  "**********": "*****************190. Reverse Bits"
 },
 null,
 {
  "**********": "*****************Reverse bits of a given 32 bits unsigned integer."
 },
 {
  "**********": "Note:"
 },
 {
  "**********": "Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned."
 },
 {
  "**********": "In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 00000010100101000001111010011100Output:    964176192 (00111001011110000010100101000000)Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.Example 2:"
 },
 {
  "**********": "Input: n = 11111111111111111111111111111101Output:   3221225471 (10111111111111111111111111111111)Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The input must be a binary string of length 32"
 },
 null,
 {
  "**********": "Follow up: If this function is called many times, how would you optimize it?"
 },
 {
  "**********": "*********************191. Number of 1 Bits"
 },
 null,
 {
  "**********": "*********************Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight)."
 },
 {
  "**********": "Note:"
 },
 {
  "**********": "Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned."
 },
 {
  "**********": "In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 00000000000000000000000000001011Output: 3Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.Example 2:"
 },
 {
  "**********": "Input: n = 00000000000000000000000010000000Output: 1Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.Example 3:"
 },
 {
  "**********": "Input: n = 11111111111111111111111111111101Output: 31Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The input must be a binary string of length 32."
 },
 {
  "**********": "Follow up: If this function is called many times, how would you optimize it?"
 },
 {
  "**********": "*****************202. Happy Number"
 },
 null,
 {
  "**********": "*****************Write an algorithm to determine if a number n is happy."
 },
 {
  "**********": "A happy number is a number defined by the following process:"
 },
 {
  "**********": "Starting with any positive integer, replace the number by the sum of the squares of its digits."
 },
 {
  "**********": "Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1."
 },
 {
  "**********": "Those numbers for which this process ends in 1 are happy."
 },
 {
  "**********": "Return trueifnis a happy number, andfalseif not."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 19Output: trueExplanation:12 + 92 = 8282 + 22 = 6862 + 82 = 10012 + 02 + 02 = 1Example 2:"
 },
 {
  "**********": "Input: n = 2Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 231 - 1"
 },
 {
  "**********": "********************************203. Remove Linked List Elements"
 },
 null,
 {
  "**********": "********************************Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: head = [1,2,6,3,4,5,6], val = 6Output: [1,2,3,4,5]Example 2:"
 },
 {
  "**********": "Input: head = [], val = 1Output: []Example 3:"
 },
 {
  "**********": "Input: head = [7,7,7,7], val = 7Output: []"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the list is in the range [0, 104]."
 },
 {
  "**********": "1 <= Node.val <= 50"
 },
 {
  "**********": "0 <= val <= 50"
 },
 {
  "**********": "***********************205. Isomorphic Strings"
 },
 null,
 {
  "**********": "***********************Given two strings s and t, determine if they are isomorphic."
 },
 {
  "**********": "Two strings s and t are isomorphic if the characters in s can be replaced to get t."
 },
 {
  "**********": "All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"egg\", t = \"add\"Output: trueExample 2:"
 },
 {
  "**********": "Input: s = \"foo\", t = \"bar\"Output: falseExample 3:"
 },
 {
  "**********": "Input: s = \"paper\", t = \"title\"Output: true"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 5 * 104"
 },
 {
  "**********": "t.length == s.length"
 },
 {
  "**********": "s and t consist of any valid ascii character."
 },
 {
  "**********": "************************206. Reverse Linked List"
 },
 null,
 {
  "**********": "************************Given the head of a singly linked list, reverse the list, and return the reversed list."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: head = [1,2,3,4,5]Output: [5,4,3,2,1]Example 2:"
 },
 {
  "**********": "Input: head = [1,2]Output: [2,1]Example 3:"
 },
 {
  "**********": "Input: head = []Output: []"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the list is the range [0, 5000]."
 },
 {
  "**********": "-5000 <= Node.val <= 5000"
 },
 null,
 {
  "**********": "Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?"
 },
 {
  "**********": "***********************217. Contains Duplicate"
 },
 null,
 {
  "**********": "***********************Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,2,3,1]Output: trueExample 2:"
 },
 {
  "**********": "Input: nums = [1,2,3,4]Output: falseExample 3:"
 },
 {
  "**********": "Input: nums = [1,1,1,3,3,4,3,2,4,2]Output: true"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 105"
 },
 {
  "**********": "-109 <= nums[i] <= 109"
 },
 {
  "**********": "**************************219. Contains Duplicate II"
 },
 null,
 {
  "**********": "**************************Given an integer array nums and an integer k, return true if there are two distinct indicesi and j in the array such that nums[i] == nums[j] and abs(i - j) <= k."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,2,3,1], k = 3Output: trueExample 2:"
 },
 {
  "**********": "Input: nums = [1,0,1,1], k = 1Output: trueExample 3:"
 },
 {
  "**********": "Input: nums = [1,2,3,1,2,3], k = 2Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 105"
 },
 {
  "**********": "-109 <= nums[i] <= 109"
 },
 {
  "**********": "0 <= k <= 105"
 },
 {
  "**********": "*********************************225. Implement Stack using Queues"
 },
 null,
 {
  "**********": "*********************************Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty)."
 },
 {
  "**********": "Implement the MyStack class:"
 },
 {
  "**********": "void push(int x) Pushes element x to the top of the stack."
 },
 {
  "**********": "int pop() Removes the element on the top of the stack and returns it."
 },
 {
  "**********": "int top() Returns the element on the top of the stack."
 },
 {
  "**********": "boolean empty() Returns true if the stack is empty, false otherwise."
 },
 {
  "**********": "Notes:"
 },
 {
  "**********": "You must use only standard operations of a queue, which means that only push to back, peek\/pop from front, size and is empty operations are valid."
 },
 {
  "**********": "Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"][[], [1], [2], [], [], []]Output[null, null, null, 2, 2, false]\nExplanationMyStack myStack = new MyStack();myStack.push(1);myStack.push(2);myStack.top(); \/\/ return 2myStack.pop(); \/\/ return 2myStack.empty(); \/\/ return False"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= x <= 9"
 },
 {
  "**********": "At most 100 calls will be made to push, pop, top, and empty."
 },
 {
  "**********": "All the calls to pop and top are valid."
 },
 null,
 {
  "**********": "Follow-up: Can you implement the stack using only one queue?"
 },
 {
  "**********": "***********************226. Invert Binary Tree"
 },
 null,
 {
  "**********": "***********************Given the root of a binary tree, invert the tree, and return its root."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [4,2,7,1,3,6,9]Output: [4,7,2,9,6,3,1]Example 2:"
 },
 {
  "**********": "Input: root = [2,1,3]Output: [2,3,1]Example 3:"
 },
 {
  "**********": "Input: root = []Output: []"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [0, 100]."
 },
 {
  "**********": "-100 <= Node.val <= 100"
 },
 {
  "**********": "*******************228. Summary Ranges"
 },
 null,
 {
  "**********": "*******************You are given a sorted unique integer array nums."
 },
 {
  "**********": "A range[a,b] is the set of all integers from a to b (inclusive)."
 },
 {
  "**********": "Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums."
 },
 {
  "**********": "Each range [a,b] in the list should be output as:"
 },
 {
  "**********": "\"a->b\" if a != b"
 },
 {
  "**********": "\"a\" if a == b"
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [0,1,2,4,5,7]Output: [\"0->2\",\"4->5\",\"7\"]Explanation: The ranges are:[0,2] --> \"0->2\"[4,5] --> \"4->5\"[7,7] --> \"7\"Example 2:"
 },
 {
  "**********": "Input: nums = [0,2,3,4,6,8,9]Output: [\"0\",\"2->4\",\"6\",\"8->9\"]Explanation: The ranges are:[0,0] --> \"0\"[2,4] --> \"2->4\"[6,6] --> \"6\"[8,9] --> \"8->9\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= nums.length <= 20"
 },
 {
  "**********": "-231 <= nums[i] <= 231 - 1"
 },
 {
  "**********": "All the values of nums are unique."
 },
 {
  "**********": "nums is sorted in ascending order."
 },
 {
  "**********": "*****************231. Power of Two"
 },
 null,
 {
  "**********": "*****************Given an integer n, return true if it is a power of two. Otherwise, return false."
 },
 {
  "**********": "An integer n is a power of two, if there exists an integer x such that n == 2x."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 1Output: trueExplanation: 20 = 1Example 2:"
 },
 {
  "**********": "Input: n = 16Output: trueExplanation: 24 = 16Example 3:"
 },
 {
  "**********": "Input: n = 3Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "-231 <= n <= 231 - 1"
 },
 {
  "**********": "Follow up: Could you solve it without loops\/recursion?"
 },
 {
  "**********": "*********************************232. Implement Queue using Stacks"
 },
 null,
 {
  "**********": "*********************************Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty)."
 },
 {
  "**********": "Implement the MyQueue class:"
 },
 {
  "**********": "void push(int x) Pushes element x to the back of the queue."
 },
 {
  "**********": "int pop() Removes the element from the front of the queue and returns it."
 },
 {
  "**********": "int peek() Returns the element at the front of the queue."
 },
 {
  "**********": "boolean empty() Returns true if the queue is empty, false otherwise."
 },
 {
  "**********": "Notes:"
 },
 {
  "**********": "You must use only standard operations of a stack, which means only push to top, peek\/pop from top, size, and is empty operations are valid."
 },
 {
  "**********": "Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"][[], [1], [2], [], [], []]Output[null, null, null, 1, 1, false]\nExplanationMyQueue myQueue = new MyQueue();myQueue.push(1); \/\/ queue is: [1]myQueue.push(2); \/\/ queue is: [1, 2] (leftmost is front of the queue)myQueue.peek(); \/\/ return 1myQueue.pop(); \/\/ return 1, queue is [2]myQueue.empty(); \/\/ return false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= x <= 9"
 },
 {
  "**********": "At most 100 calls will be made to push, pop, peek, and empty."
 },
 {
  "**********": "All the calls to pop and peek are valid."
 },
 null,
 {
  "**********": "Follow-up: Can you implement the queue such that each operation is amortizedO(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer."
 },
 {
  "**********": "***************************234. Palindrome Linked List"
 },
 null,
 {
  "**********": "***************************Given the head of a singly linked list, return true if it is a palindrome or false otherwise."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: head = [1,2,2,1]Output: trueExample 2:"
 },
 {
  "**********": "Input: head = [1,2]Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the list is in the range [1, 105]."
 },
 {
  "**********": "0 <= Node.val <= 9"
 },
 {
  "**********": "Follow up: Could you do it in O(n) time and O(1) space?"
 },
 {
  "**********": "******************242. Valid Anagram"
 },
 null,
 {
  "**********": "******************Given two strings s and t, return trueiftis an anagram ofs, andfalseotherwise."
 },
 {
  "**********": "An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"anagram\", t = \"nagaram\"Output: trueExample 2:"
 },
 {
  "**********": "Input: s = \"rat\", t = \"car\"Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length, t.length <= 5 * 104"
 },
 {
  "**********": "s and t consist of lowercase English letters."
 },
 null,
 {
  "**********": "Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?"
 },
 {
  "**********": "**********************257. Binary Tree Paths"
 },
 null,
 {
  "**********": "**********************Given the root of a binary tree, return all root-to-leaf paths in any order."
 },
 {
  "**********": "A leaf is a node with no children."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [1,2,3,null,5]Output: [\"1->2->5\",\"1->3\"]Example 2:"
 },
 {
  "**********": "Input: root = [1]Output: [\"1\"]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [1, 100]."
 },
 {
  "**********": "-100 <= Node.val <= 100"
 },
 {
  "**********": "***************258. Add Digits"
 },
 null,
 {
  "**********": "***************Given an integer num, repeatedly add all its digits until the result has only one digit, and return it."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: num = 38Output: 2Explanation: The process is38 --> 3 + 8 --> 1111 --> 1 + 1 --> 2 Since 2 has only one digit, return it.Example 2:"
 },
 {
  "**********": "Input: num = 0Output: 0"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= num <= 231 - 1"
 },
 null,
 {
  "**********": "Follow up: Could you do it without any loop\/recursion in O(1) runtime?"
 },
 {
  "**********": "****************263. Ugly Number"
 },
 null,
 {
  "**********": "****************An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5."
 },
 {
  "**********": "Given an integer n, return trueifnis an ugly number."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 6Output: trueExplanation: 6 = 2 × 3Example 2:"
 },
 {
  "**********": "Input: n = 1Output: trueExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.Example 3:"
 },
 {
  "**********": "Input: n = 14Output: falseExplanation: 14 is not ugly since it includes the prime factor 7."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "-231 <= n <= 231 - 1"
 },
 {
  "**********": "*******************268. Missing Number"
 },
 null,
 {
  "**********": "*******************Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [3,0,1]Output: 2Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.Example 2:"
 },
 {
  "**********": "Input: nums = [0,1]Output: 2Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.Example 3:"
 },
 {
  "**********": "Input: nums = [9,6,4,2,3,5,7,0,1]Output: 8Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "n == nums.length"
 },
 {
  "**********": "1 <= n <= 104"
 },
 {
  "**********": "0 <= nums[i] <= n"
 },
 {
  "**********": "All the numbers of nums are unique."
 },
 null,
 {
  "**********": "Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?"
 },
 {
  "**********": "**********************278. First Bad Version"
 },
 null,
 {
  "**********": "**********************You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad."
 },
 {
  "**********": "Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad."
 },
 {
  "**********": "You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 5, bad = 4Output: 4Explanation:call isBadVersion(3) -> falsecall isBadVersion(5) -> truecall isBadVersion(4) -> trueThen 4 is the first bad version.Example 2:"
 },
 {
  "**********": "Input: n = 1, bad = 1Output: 1"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= bad <= n <= 231 - 1"
 },
 {
  "**********": "****************283. Move Zeroes"
 },
 null,
 {
  "**********": "****************Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements."
 },
 {
  "**********": "Note that you must do this in-place without making a copy of the array."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [0,1,0,3,12]Output: [1,3,12,0,0]Example 2:"
 },
 {
  "**********": "Input: nums = [0]Output: [0]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 104"
 },
 {
  "**********": "-231 <= nums[i] <= 231 - 1"
 },
 {
  "**********": "Follow up: Could you minimize the total number of operations done?"
 },
 {
  "**********": "*****************290. Word Pattern"
 },
 null,
 {
  "**********": "*****************Given a pattern and a string s, find if s follows the same pattern."
 },
 {
  "**********": "Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: pattern = \"abba\", s = \"dog cat cat dog\"Output: trueExample 2:"
 },
 {
  "**********": "Input: pattern = \"abba\", s = \"dog cat cat fish\"Output: falseExample 3:"
 },
 {
  "**********": "Input: pattern = \"aaaa\", s = \"dog cat cat dog\"Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= pattern.length <= 300"
 },
 {
  "**********": "pattern contains only lower-case English letters."
 },
 {
  "**********": "1 <= s.length <= 3000"
 },
 {
  "**********": "s contains only lowercase English letters and spaces ' '."
 },
 {
  "**********": "sdoes not contain any leading or trailing spaces."
 },
 {
  "**********": "All the words in s are separated by a single space."
 },
 {
  "**********": "*************292. Nim Game"
 },
 null,
 {
  "**********": "*************You are playing the following Nim Game with your friend:"
 },
 {
  "**********": "Initially, there is a heap of stones on the table."
 },
 {
  "**********": "You and your friend will alternate taking turns, and you go first."
 },
 {
  "**********": "On each turn, the person whose turn it is will remove 1 to 3 stones from the heap."
 },
 {
  "**********": "The one who removes the last stone is the winner."
 },
 {
  "**********": "Given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 4Output: falseExplanation: These are the possible outcomes:1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.3. You remove 3 stones. Your friend removes the last stone. Your friend wins.In all outcomes, your friend wins.Example 2:"
 },
 {
  "**********": "Input: n = 1Output: trueExample 3:"
 },
 {
  "**********": "Input: n = 2Output: true"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 231 - 1"
 },
 {
  "**********": "********************************303. Range Sum Query - Immutable"
 },
 null,
 {
  "**********": "********************************Given an integer array nums, handle multiple queries of the following type:"
 },
 {
  "**********": "1. Calculate the sum of the elements of nums between indices left and rightinclusive where left <= right."
 },
 {
  "**********": "Implement the NumArray class:"
 },
 {
  "**********": "NumArray(int[] nums) Initializes the object with the integer array nums."
 },
 {
  "**********": "int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and rightinclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right])."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"][[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]Output[null, 1, -1, -3]\nExplanationNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);numArray.sumRange(0, 2); \/\/ return (-2) + 0 + 3 = 1numArray.sumRange(2, 5); \/\/ return 3 + (-5) + 2 + (-1) = -1numArray.sumRange(0, 5); \/\/ return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 104"
 },
 {
  "**********": "-105 <= nums[i] <= 105"
 },
 {
  "**********": "0 <= left <= right < nums.length"
 },
 {
  "**********": "At most 104 calls will be made to sumRange."
 },
 {
  "**********": "*******************326. Power of Three"
 },
 null,
 {
  "**********": "*******************Given an integer n, return true if it is a power of three. Otherwise, return false."
 },
 {
  "**********": "An integer n is a power of three, if there exists an integer x such that n == 3x."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 27Output: trueExplanation: 27 = 33Example 2:"
 },
 {
  "**********": "Input: n = 0Output: falseExplanation: There is no x where 3x = 0.Example 3:"
 },
 {
  "**********": "Input: n = -1Output: falseExplanation: There is no x where 3x = (-1)."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "-231 <= n <= 231 - 1"
 },
 {
  "**********": "Follow up: Could you solve it without loops\/recursion?"
 },
 {
  "**********": "******************338. Counting Bits"
 },
 null,
 {
  "**********": "******************Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 2Output: [0,1,1]Explanation:0 --> 01 --> 12 --> 10Example 2:"
 },
 {
  "**********": "Input: n = 5Output: [0,1,1,2,1,2]Explanation:0 --> 01 --> 12 --> 103 --> 114 --> 1005 --> 101"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= n <= 105"
 },
 null,
 {
  "**********": "Follow up:"
 },
 {
  "**********": "It is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass?"
 },
 {
  "**********": "Can you do it without using any built-in function (i.e., like __builtin_popcount in C++)?"
 },
 {
  "**********": "******************342. Power of Four"
 },
 null,
 {
  "**********": "******************Given an integer n, return true if it is a power of four. Otherwise, return false."
 },
 {
  "**********": "An integer n is a power of four, if there exists an integer x such that n == 4x."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 16Output: trueExample 2:"
 },
 {
  "**********": "Input: n = 5Output: falseExample 3:"
 },
 {
  "**********": "Input: n = 1Output: true"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "-231 <= n <= 231 - 1"
 },
 {
  "**********": "Follow up: Could you solve it without loops\/recursion?"
 },
 {
  "**********": "*******************344. Reverse String"
 },
 null,
 {
  "**********": "*******************Write a function that reverses a string. The input string is given as an array of characters s."
 },
 {
  "**********": "You must do this by modifying the input array in-place with O(1) extra memory."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]Output: [\"o\",\"l\",\"l\",\"e\",\"h\"]Example 2:"
 },
 {
  "**********": "Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 105"
 },
 {
  "**********": "s[i] is a printable ascii character."
 },
 {
  "**********": "*******************************345. Reverse Vowels of a String"
 },
 null,
 {
  "**********": "*******************************Given a string s, reverse only all the vowels in the string and return it."
 },
 {
  "**********": "The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"hello\"Output: \"holle\"Example 2:"
 },
 {
  "**********": "Input: s = \"leetcode\"Output: \"leotcede\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 3 * 105"
 },
 {
  "**********": "s consist of printable ASCII characters."
 },
 {
  "**********": "*******************************349. Intersection of Two Arrays"
 },
 null,
 {
  "**********": "*******************************Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums1 = [1,2,2,1], nums2 = [2,2]Output: [2]Example 2:"
 },
 {
  "**********": "Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]Output: [9,4]Explanation: [4,9] is also accepted."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums1.length, nums2.length <= 1000"
 },
 {
  "**********": "0 <= nums1[i], nums2[i] <= 1000"
 },
 {
  "**********": "**********************************350. Intersection of Two Arrays II"
 },
 null,
 {
  "**********": "**********************************Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums1 = [1,2,2,1], nums2 = [2,2]Output: [2,2]Example 2:"
 },
 {
  "**********": "Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]Output: [4,9]Explanation: [9,4] is also accepted."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums1.length, nums2.length <= 1000"
 },
 {
  "**********": "0 <= nums1[i], nums2[i] <= 1000"
 },
 null,
 {
  "**********": "Follow up:"
 },
 {
  "**********": "What if the given array is already sorted? How would you optimize your algorithm?"
 },
 {
  "**********": "What if nums1's size is small compared to nums2's size? Which algorithm is better?"
 },
 {
  "**********": "What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?"
 },
 {
  "**********": "*************************367. Valid Perfect Square"
 },
 null,
 {
  "**********": "*************************Given a positive integer num, write a function which returns True if num is a perfect square else False."
 },
 {
  "**********": "Follow up:Do not use any built-in library function such as sqrt."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: num = 16Output: trueExample 2:"
 },
 {
  "**********": "Input: num = 14Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= num <= 2^31 - 1"
 },
 {
  "**********": "*********************************374. Guess Number Higher or Lower"
 },
 null,
 {
  "**********": "*********************************We are playing the Guess Game. The game is as follows:"
 },
 {
  "**********": "I pick a number from 1 to n. You have to guess which number I picked."
 },
 {
  "**********": "Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess."
 },
 {
  "**********": "You call a pre-defined API int guess(int num), which returns three possible results:"
 },
 {
  "**********": "-1: Your guess is higher than the number I picked (i.e. num > pick)."
 },
 {
  "**********": "1: Your guess is lower than the number I picked (i.e. num < pick)."
 },
 {
  "**********": "0: your guess is equal to the number I picked (i.e. num == pick)."
 },
 {
  "**********": "Return the number that I picked."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 10, pick = 6Output: 6Example 2:"
 },
 {
  "**********": "Input: n = 1, pick = 1Output: 1Example 3:"
 },
 {
  "**********": "Input: n = 2, pick = 1Output: 1"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 231 - 1"
 },
 {
  "**********": "1 <= pick <= n"
 },
 {
  "**********": "****************383. Ransom Note"
 },
 null,
 {
  "**********": "****************Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise."
 },
 {
  "**********": "Each letter in magazine can only be used once in ransomNote."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: ransomNote = \"a\", magazine = \"b\"Output: falseExample 2:"
 },
 {
  "**********": "Input: ransomNote = \"aa\", magazine = \"ab\"Output: falseExample 3:"
 },
 {
  "**********": "Input: ransomNote = \"aa\", magazine = \"aab\"Output: true"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= ransomNote.length, magazine.length <= 105"
 },
 {
  "**********": "ransomNote and magazine consist of lowercase English letters."
 },
 {
  "**********": "***************************************387. First Unique Character in a String"
 },
 null,
 {
  "**********": "***************************************Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"leetcode\"Output: 0Example 2:"
 },
 {
  "**********": "Input: s = \"loveleetcode\"Output: 2Example 3:"
 },
 {
  "**********": "Input: s = \"aabb\"Output: -1"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 105"
 },
 {
  "**********": "s consists of only lowercase English letters."
 },
 {
  "**********": "************************389. Find the Difference"
 },
 null,
 {
  "**********": "************************You are given two strings s and t."
 },
 {
  "**********": "String t is generated by random shuffling string s and then add one more letter at a random position."
 },
 {
  "**********": "Return the letter that was added to t."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"abcd\", t = \"abcde\"Output: \"e\"Explanation: 'e' is the letter that was added.Example 2:"
 },
 {
  "**********": "Input: s = \"\", t = \"y\"Output: \"y\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= s.length <= 1000"
 },
 {
  "**********": "t.length == s.length + 1"
 },
 {
  "**********": "s and t consist of lowercase English letters."
 },
 {
  "**********": "*******************392. Is Subsequence"
 },
 null,
 {
  "**********": "*******************Given two strings s and t, return true if s is a subsequence of t, or false otherwise."
 },
 {
  "**********": "A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not)."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"abc\", t = \"ahbgdc\"Output: trueExample 2:"
 },
 {
  "**********": "Input: s = \"axc\", t = \"ahbgdc\"Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= s.length <= 100"
 },
 {
  "**********": "0 <= t.length <= 104"
 },
 {
  "**********": "s and t consist only of lowercase English letters."
 },
 {
  "**********": "Follow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where k >= 109, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?"
 },
 {
  "**********": "*****************401. Binary Watch"
 },
 null,
 {
  "**********": "*****************A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right."
 },
 {
  "**********": "For example, the below binary watch reads \"4:51\"."
 },
 null,
 {
  "**********": "Given an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order."
 },
 {
  "**********": "The hour must not contain a leading zero."
 },
 {
  "**********": "For example, \"01:00\" is not valid. It should be \"1:00\"."
 },
 {
  "**********": "The minute must be consist of two digits and may contain a leading zero."
 },
 {
  "**********": "For example, \"10:2\" is not valid. It should be \"10:02\"."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: turnedOn = 1Output: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]Example 2:"
 },
 {
  "**********": "Input: turnedOn = 9Output: []"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= turnedOn <= 10"
 },
 {
  "**********": "***********************404. Sum of Left Leaves"
 },
 null,
 {
  "**********": "***********************Given the root of a binary tree, return the sum of all left leaves."
 },
 {
  "**********": "A leaf is a node with no children. A left leaf is a leaf that is the left child of another node."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [3,9,20,null,null,15,7]Output: 24Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.Example 2:"
 },
 {
  "**********": "Input: root = [1]Output: 0"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [1, 1000]."
 },
 {
  "**********": "-1000 <= Node.val <= 1000"
 },
 {
  "**********": "************************************405. Convert a Number to Hexadecimal"
 },
 null,
 {
  "**********": "************************************Given an integer num, return a string representing its hexadecimal representation. For negative integers, two’s complement method is used."
 },
 {
  "**********": "All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself."
 },
 {
  "**********": "Note: You are not allowed to use any built-in library method to directly solve this problem."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: num = 26Output: \"1a\"Example 2:"
 },
 {
  "**********": "Input: num = -1Output: \"ffffffff\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "-231 <= num <= 231 - 1"
 },
 {
  "**********": "***********************409. Longest Palindrome"
 },
 null,
 {
  "**********": "***********************Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters."
 },
 {
  "**********": "Letters are case sensitive, for example, \"Aa\" is not considered a palindrome here."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"abccccdd\"Output: 7Explanation: One longest palindrome that can be built is \"dccaccd\", whose length is 7.Example 2:"
 },
 {
  "**********": "Input: s = \"a\"Output: 1Explanation: The longest palindrome that can be built is \"a\", whose length is 1."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 2000"
 },
 {
  "**********": "s consists of lowercase and\/or uppercase English letters only."
 },
 {
  "**********": "**************412. Fizz Buzz"
 },
 null,
 {
  "**********": "**************Given an integer n, return a string array answer (1-indexed) where:"
 },
 {
  "**********": "answer[i] == \"FizzBuzz\" if i is divisible by 3 and 5."
 },
 {
  "**********": "answer[i] == \"Fizz\" if i is divisible by 3."
 },
 {
  "**********": "answer[i] == \"Buzz\" if i is divisible by 5."
 },
 {
  "**********": "answer[i] == i (as a string) if none of the above conditions are true."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 3Output: [\"1\",\"2\",\"Fizz\"]Example 2:"
 },
 {
  "**********": "Input: n = 5Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]Example 3:"
 },
 {
  "**********": "Input: n = 15Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 104"
 },
 {
  "**********": "*************************414. Third Maximum Number"
 },
 null,
 {
  "**********": "*************************Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [3,2,1]Output: 1Explanation:The first distinct maximum is 3.The second distinct maximum is 2.The third distinct maximum is 1.Example 2:"
 },
 {
  "**********": "Input: nums = [1,2]Output: 2Explanation:The first distinct maximum is 2.The second distinct maximum is 1.The third distinct maximum does not exist, so the maximum (2) is returned instead.Example 3:"
 },
 {
  "**********": "Input: nums = [2,2,3,1]Output: 1Explanation:The first distinct maximum is 3.The second distinct maximum is 2 (both 2's are counted together since they have the same value).The third distinct maximum is 1."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 104"
 },
 {
  "**********": "-231 <= nums[i] <= 231 - 1"
 },
 {
  "**********": "Follow up: Can you find an O(n) solution?"
 },
 {
  "**********": "****************415. Add Strings"
 },
 null,
 {
  "**********": "****************Given two non-negative integers, num1 and num2 represented as string, return the sum ofnum1andnum2as a string."
 },
 {
  "**********": "You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: num1 = \"11\", num2 = \"123\"Output: \"134\"Example 2:"
 },
 {
  "**********": "Input: num1 = \"456\", num2 = \"77\"Output: \"533\"Example 3:"
 },
 {
  "**********": "Input: num1 = \"0\", num2 = \"0\"Output: \"0\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= num1.length, num2.length <= 104"
 },
 {
  "**********": "num1 and num2 consist of only digits."
 },
 {
  "**********": "num1 and num2 don't have any leading zeros except for the zero itself."
 },
 {
  "**********": "***********************************434. Number of Segments in a String"
 },
 null,
 {
  "**********": "***********************************Given a string s, return the number of segments in the string."
 },
 {
  "**********": "A segment is defined to be a contiguous sequence of non-space characters."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"Hello, my name is John\"Output: 5Explanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]Example 2:"
 },
 {
  "**********": "Input: s = \"Hello\"Output: 1"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= s.length <= 300"
 },
 {
  "**********": "s consists of lowercase and uppercase English letters, digits, or one of the following characters \"!@#$%^&*()_+-=',.:\"."
 },
 {
  "**********": "The only space character in s is ' '."
 },
 {
  "**********": "********************441. Arranging Coins"
 },
 null,
 {
  "**********": "********************You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete."
 },
 {
  "**********": "Given the integer n, return the number of complete rows of the staircase you will build."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 5Output: 2Explanation: Because the 3rd row is incomplete, we return 2.Example 2:"
 },
 {
  "**********": "Input: n = 8Output: 3Explanation: Because the 4th row is incomplete, we return 3."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 231 - 1"
 },
 {
  "**********": "*********************************************448. Find All Numbers Disappeared in an Array"
 },
 null,
 {
  "**********": "*********************************************Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range[1, n]that do not appear innums."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [4,3,2,7,8,2,3,1]Output: [5,6]Example 2:"
 },
 {
  "**********": "Input: nums = [1,1]Output: [2]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "n == nums.length"
 },
 {
  "**********": "1 <= n <= 105"
 },
 {
  "**********": "1 <= nums[i] <= n"
 },
 null,
 {
  "**********": "Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space."
 },
 {
  "**********": "*******************455. Assign Cookies"
 },
 null,
 {
  "**********": "*******************Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie."
 },
 {
  "**********": "Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: g = [1,2,3], s = [1,1]Output: 1Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.You need to output 1.Example 2:"
 },
 {
  "**********": "Input: g = [1,2], s = [1,2,3]Output: 2Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. You have 3 cookies and their sizes are big enough to gratify all of the children, You need to output 2."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= g.length <= 3 * 104"
 },
 {
  "**********": "0 <= s.length <= 3 * 104"
 },
 {
  "**********": "1 <= g[i], s[j] <= 231 - 1"
 },
 {
  "**********": "*******************************459. Repeated Substring Pattern"
 },
 null,
 {
  "**********": "*******************************Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"abab\"Output: trueExplanation: It is the substring \"ab\" twice.Example 2:"
 },
 {
  "**********": "Input: s = \"aba\"Output: falseExample 3:"
 },
 {
  "**********": "Input: s = \"abcabcabcabc\"Output: trueExplanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 104"
 },
 {
  "**********": "s consists of lowercase English letters."
 },
 {
  "**********": "*********************461. Hamming Distance"
 },
 null,
 {
  "**********": "*********************The Hamming distance between two integers is the number of positions at which the corresponding bits are different."
 },
 {
  "**********": "Given two integers x and y, return the Hamming distance between them."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: x = 1, y = 4Output: 2Explanation:1   (0 0 0 1)4   (0 1 0 0) ↑   ↑The above arrows point to positions where the corresponding bits are different.Example 2:"
 },
 {
  "**********": "Input: x = 3, y = 1Output: 1"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= x, y <= 231 - 1"
 },
 {
  "**********": "*********************463. Island Perimeter"
 },
 null,
 {
  "**********": "*********************You are given row x colgrid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water."
 },
 {
  "**********": "Grid cells are connected horizontally\/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells)."
 },
 {
  "**********": "The island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]Output: 16Explanation: The perimeter is the 16 yellow stripes in the image above.Example 2:"
 },
 {
  "**********": "Input: grid = [[1]]Output: 4Example 3:"
 },
 {
  "**********": "Input: grid = [[1,0]]Output: 4"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "row == grid.length"
 },
 {
  "**********": "col == grid[i].length"
 },
 {
  "**********": "1 <= row, col <= 100"
 },
 {
  "**********": "grid[i][j] is 0 or 1."
 },
 {
  "**********": "There is exactly one island in grid."
 },
 {
  "**********": "**********************476. Number Complement"
 },
 null,
 {
  "**********": "**********************The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation."
 },
 {
  "**********": "For example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2."
 },
 {
  "**********": "Given an integer num, return its complement."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: num = 5Output: 2Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.Example 2:"
 },
 {
  "**********": "Input: num = 1Output: 0Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= num < 231"
 },
 null,
 {
  "**********": "Note: This question is the same as 1009: https:\/\/leetcode.com\/problems\/complement-of-base-10-integer\/"
 },
 {
  "**********": "***************************482. License Key Formatting"
 },
 null,
 {
  "**********": "***************************You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k."
 },
 {
  "**********": "We want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase."
 },
 {
  "**********": "Return the reformatted license key."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"5F3Z-2e-9-w\", k = 4Output: \"5F3Z-2E9W\"Explanation: The string s has been split into two parts, each part has 4 characters.Note that the two extra dashes are not needed and can be removed.Example 2:"
 },
 {
  "**********": "Input: s = \"2-5g-3-J\", k = 2Output: \"2-5G-3J\"Explanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 105"
 },
 {
  "**********": "s consists of English letters, digits, and dashes '-'."
 },
 {
  "**********": "1 <= k <= 104"
 },
 {
  "**********": "*************************485. Max Consecutive Ones"
 },
 null,
 {
  "**********": "*************************Given a binary array nums, return the maximum number of consecutive 1's in the array."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,1,0,1,1,1]Output: 3Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.Example 2:"
 },
 {
  "**********": "Input: nums = [1,0,1,1,0,1]Output: 2"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 105"
 },
 {
  "**********": "nums[i] is either 0 or 1."
 },
 {
  "**********": "****************************492. Construct the Rectangle"
 },
 null,
 {
  "**********": "****************************A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:"
 },
 {
  "**********": "1. The area of the rectangular web page you designed must equal to the given target area."
 },
 {
  "**********": "2. The width W should not be larger than the length L, which means L >= W."
 },
 {
  "**********": "3. The difference between length L and width W should be as small as possible."
 },
 {
  "**********": "Return an array [L, W] where L and W are the length and width of the web page you designed in sequence."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: area = 4Output: [2,2]Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.Example 2:"
 },
 {
  "**********": "Input: area = 37Output: [37,1]Example 3:"
 },
 {
  "**********": "Input: area = 122122Output: [427,286]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= area <= 107"
 },
 {
  "**********": "********************495. Teemo Attacking"
 },
 null,
 {
  "**********": "********************Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack."
 },
 {
  "**********": "You are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration."
 },
 {
  "**********": "Return the total number of seconds that Ashe is poisoned."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: timeSeries = [1,4], duration = 2Output: 4Explanation: Teemo's attacks on Ashe go as follows:- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.Ashe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.Example 2:"
 },
 {
  "**********": "Input: timeSeries = [1,2], duration = 2Output: 3Explanation: Teemo's attacks on Ashe go as follows:- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.Ashe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= timeSeries.length <= 104"
 },
 {
  "**********": "0 <= timeSeries[i], duration <= 107"
 },
 {
  "**********": "timeSeries is sorted in non-decreasing order."
 },
 {
  "**********": "***************************496. Next Greater Element I"
 },
 null,
 {
  "**********": "***************************The next greater element of some element x in an array is the first greater element that is to the right of x in the same array."
 },
 {
  "**********": "You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2."
 },
 {
  "**********": "For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1."
 },
 {
  "**********": "Return an array ans of length nums1.length such that ans[i] is the next greater element as described above."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums1 = [4,1,2], nums2 = [1,3,4,2]Output: [-1,3,-1]Explanation: The next greater element for each value of nums1 is as follows:- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.Example 2:"
 },
 {
  "**********": "Input: nums1 = [2,4], nums2 = [1,2,3,4]Output: [3,-1]Explanation: The next greater element for each value of nums1 is as follows:- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums1.length <= nums2.length <= 1000"
 },
 {
  "**********": "0 <= nums1[i], nums2[i] <= 104"
 },
 {
  "**********": "All integers in nums1 and nums2 are unique."
 },
 {
  "**********": "All the integers of nums1 also appear in nums2."
 },
 {
  "**********": "Follow up: Could you find an O(nums1.length + nums2.length) solution?"
 },
 {
  "**********": "*****************500. Keyboard Row"
 },
 null,
 {
  "**********": "*****************Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below."
 },
 {
  "**********": "In the American keyboard:"
 },
 {
  "**********": "the first row consists of the characters \"qwertyuiop\","
 },
 {
  "**********": "the second row consists of the characters \"asdfghjkl\", and"
 },
 {
  "**********": "the third row consists of the characters \"zxcvbnm\"."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]Output: [\"Alaska\",\"Dad\"]Example 2:"
 },
 {
  "**********": "Input: words = [\"omk\"]Output: []Example 3:"
 },
 {
  "**********": "Input: words = [\"adsdf\",\"sfd\"]Output: [\"adsdf\",\"sfd\"]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= words.length <= 20"
 },
 {
  "**********": "1 <= words[i].length <= 100"
 },
 {
  "**********": "words[i] consists of English letters (both lowercase and uppercase). "
 },
 {
  "**********": "************************************501. Find Mode in Binary Search Tree"
 },
 null,
 {
  "**********": "************************************Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it."
 },
 {
  "**********": "If the tree has more than one mode, return them in any order."
 },
 {
  "**********": "Assume a BST is defined as follows:"
 },
 {
  "**********": "The left subtree of a node contains only nodes with keys less than or equal to the node's key."
 },
 {
  "**********": "The right subtree of a node contains only nodes with keys greater than or equal to the node's key."
 },
 {
  "**********": "Both the left and right subtrees must also be binary search trees."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [1,null,2,2]Output: [2]Example 2:"
 },
 {
  "**********": "Input: root = [0]Output: [0]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [1, 104]."
 },
 {
  "**********": "-105 <= Node.val <= 105"
 },
 {
  "**********": "Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count)."
 },
 {
  "**********": "***********504. Base 7"
 },
 null,
 {
  "**********": "***********Given an integer num, return a string of its base 7 representation."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: num = 100Output: \"202\"Example 2:"
 },
 {
  "**********": "Input: num = -7Output: \"-10\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "-107 <= num <= 107"
 },
 {
  "**********": "*******************506. Relative Ranks"
 },
 null,
 {
  "**********": "*******************You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique."
 },
 {
  "**********": "The athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:"
 },
 {
  "**********": "The 1st place athlete's rank is \"Gold Medal\"."
 },
 {
  "**********": "The 2nd place athlete's rank is \"Silver Medal\"."
 },
 {
  "**********": "The 3rd place athlete's rank is \"Bronze Medal\"."
 },
 {
  "**********": "For the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is \"x\")."
 },
 {
  "**********": "Return an array answer of size n where answer[i] is the rank of the ith athlete."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: score = [5,4,3,2,1]Output: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]Explanation: The placements are [1st, 2nd, 3rd, 4th, 5th].Example 2:"
 },
 {
  "**********": "Input: score = [10,3,8,9,4]Output: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]Explanation: The placements are [1st, 5th, 3rd, 2nd, 4th]."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "n == score.length"
 },
 {
  "**********": "1 <= n <= 104"
 },
 {
  "**********": "0 <= score[i] <= 106"
 },
 {
  "**********": "All the values in score are unique."
 },
 {
  "**********": "*******************507. Perfect Number"
 },
 null,
 {
  "**********": "*******************A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly."
 },
 {
  "**********": "Given an integer n, return true if n is a perfect number, otherwise return false."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: num = 28Output: trueExplanation: 28 = 1 + 2 + 4 + 7 + 141, 2, 4, 7, and 14 are all divisors of 28.Example 2:"
 },
 {
  "**********": "Input: num = 7Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= num <= 108"
 },
 {
  "**********": "*********************509. Fibonacci Number"
 },
 null,
 {
  "**********": "*********************The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,"
 },
 {
  "**********": "F(0) = 0, F(1) = 1F(n) = F(n - 1) + F(n - 2), for n > 1.Given n, calculate F(n)."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 2Output: 1Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.Example 2:"
 },
 {
  "**********": "Input: n = 3Output: 2Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.Example 3:"
 },
 {
  "**********": "Input: n = 4Output: 3Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= n <= 30"
 },
 {
  "**********": "*******************520. Detect Capital"
 },
 null,
 {
  "**********": "*******************We define the usage of capitals in a word to be right when one of the following cases holds:"
 },
 {
  "**********": "All letters in this word are capitals, like \"USA\"."
 },
 {
  "**********": "All letters in this word are not capitals, like \"leetcode\"."
 },
 {
  "**********": "Only the first letter in this word is capital, like \"Google\"."
 },
 {
  "**********": "Given a string word, return true if the usage of capitals in it is right."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: word = \"USA\"Output: trueExample 2:"
 },
 {
  "**********": "Input: word = \"FlaG\"Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= word.length <= 100"
 },
 {
  "**********": "word consists of lowercase and uppercase English letters."
 },
 {
  "**********": "***********************************521. Longest Uncommon Subsequence I"
 },
 null,
 {
  "**********": "***********************************Given two strings a and b, return the length of the longest uncommon subsequence between aandb. If the longest uncommon subsequence does not exist, return -1."
 },
 {
  "**********": "An uncommon subsequence between two strings is a string that is a subsequence of one but not the other."
 },
 {
  "**********": "A subsequence of a string s is a string that can be obtained after deleting any number of characters from s."
 },
 {
  "**********": "For example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string)."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: a = \"aba\", b = \"cdc\"Output: 3Explanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".Note that \"cdc\" is also a longest uncommon subsequence.Example 2:"
 },
 {
  "**********": "Input: a = \"aaa\", b = \"bbb\"Output: 3Explanation: The longest uncommon subsequences are \"aaa\" and \"bbb\".Example 3:"
 },
 {
  "**********": "Input: a = \"aaa\", b = \"aaa\"Output: -1Explanation: Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= a.length, b.length <= 100"
 },
 {
  "**********": "a and b consist of lower-case English letters."
 },
 {
  "**********": "***************************************530. Minimum Absolute Difference in BST"
 },
 null,
 {
  "**********": "***************************************Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [4,2,6,1,3]Output: 1Example 2:"
 },
 {
  "**********": "Input: root = [1,0,48,null,null,12,49]Output: 1"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [2, 104]."
 },
 {
  "**********": "0 <= Node.val <= 105"
 },
 null,
 {
  "**********": "Note: This question is the same as 783: https:\/\/leetcode.com\/problems\/minimum-distance-between-bst-nodes\/"
 },
 {
  "**********": "**********************541. Reverse String II"
 },
 null,
 {
  "**********": "**********************Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string."
 },
 {
  "**********": "If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"abcdefg\", k = 2Output: \"bacdfeg\"Example 2:"
 },
 {
  "**********": "Input: s = \"abcd\", k = 2Output: \"bacd\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 104"
 },
 {
  "**********": "s consists of only lowercase English letters."
 },
 {
  "**********": "1 <= k <= 104"
 },
 {
  "**********": "****************************543. Diameter of Binary Tree"
 },
 null,
 {
  "**********": "****************************Given the root of a binary tree, return the length of the diameter of the tree."
 },
 {
  "**********": "The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root."
 },
 {
  "**********": "The length of a path between two nodes is represented by the number of edges between them."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [1,2,3,4,5]Output: 3Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].Example 2:"
 },
 {
  "**********": "Input: root = [1,2]Output: 1"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [1, 104]."
 },
 {
  "**********": "-100 <= Node.val <= 100"
 },
 {
  "**********": "********************************551. Student Attendance Record I"
 },
 null,
 {
  "**********": "********************************You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:"
 },
 {
  "**********": "A': Absent."
 },
 {
  "**********": "L': Late."
 },
 {
  "**********": "P': Present."
 },
 {
  "**********": "The student is eligible for an attendance award if they meet both of the following criteria:"
 },
 {
  "**********": "The student was absent ('A') for strictly fewer than 2 days total."
 },
 {
  "**********": "The student was never late ('L') for 3 or more consecutive days."
 },
 {
  "**********": "Return true if the student is eligible for an attendance award, or false otherwise."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"PPALLP\"Output: trueExplanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.Example 2:"
 },
 {
  "**********": "Input: s = \"PPALLL\"Output: falseExplanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 1000"
 },
 {
  "**********": "s[i] is either 'A', 'L', or 'P'."
 },
 {
  "**********": "**********************************557. Reverse Words in a String III"
 },
 null,
 {
  "**********": "**********************************Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"Let's take LeetCode contest\"Output: \"s'teL ekat edoCteeL tsetnoc\"Example 2:"
 },
 {
  "**********": "Input: s = \"God Ding\"Output: \"doG gniD\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 5 * 104"
 },
 {
  "**********": "s contains printable ASCII characters."
 },
 {
  "**********": "s does not contain any leading or trailing spaces."
 },
 {
  "**********": "There is at least one word in s."
 },
 {
  "**********": "All the words in s are separated by a single space."
 },
 {
  "**********": "********************************559. Maximum Depth of N-ary Tree"
 },
 null,
 {
  "**********": "********************************Given a n-ary tree, find its maximum depth."
 },
 {
  "**********": "The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node."
 },
 {
  "**********": "Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)."
 },
 null,
 {
  "**********": "Example 1:"
 },
 null,
 {
  "**********": "Input: root = [1,null,3,2,4,null,5,6]Output: 3Example 2:"
 },
 null,
 {
  "**********": "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]Output: 5"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The total number of nodes is in the range [0, 104]."
 },
 {
  "**********": "The depth of the n-ary tree is less than or equal to 1000."
 },
 {
  "**********": "********************561. Array Partition"
 },
 null,
 {
  "**********": "********************Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,4,3,2]Output: 4Explanation: All possible pairings (ignoring the ordering of elements) are:1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 32. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 33. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4So the maximum possible sum is 4.Example 2:"
 },
 {
  "**********": "Input: nums = [6,2,6,5,1,2]Output: 9Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 104"
 },
 {
  "**********": "nums.length == 2 * n"
 },
 {
  "**********": "-104 <= nums[i] <= 104"
 },
 {
  "**********": "*********************563. Binary Tree Tilt"
 },
 null,
 {
  "**********": "*********************Given the root of a binary tree, return the sum of every tree node's tilt."
 },
 {
  "**********": "The tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if the node does not have a right child."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [1,2,3]Output: 1Explanation: Tilt of node 2 : |0-0| = 0 (no children)Tilt of node 3 : |0-0| = 0 (no children)Tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)Sum of every tilt : 0 + 0 + 1 = 1Example 2:"
 },
 {
  "**********": "Input: root = [4,2,9,3,5,null,7]Output: 15Explanation: Tilt of node 3 : |0-0| = 0 (no children)Tilt of node 5 : |0-0| = 0 (no children)Tilt of node 7 : |0-0| = 0 (no children)Tilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)Tilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)Tilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)Sum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15Example 3:"
 },
 {
  "**********": "Input: root = [21,7,14,1,1,2,2,3,3]Output: 9"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [0, 104]."
 },
 {
  "**********": "-1000 <= Node.val <= 1000"
 },
 {
  "**********": "***********************566. Reshape the Matrix"
 },
 null,
 {
  "**********": "***********************In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data."
 },
 {
  "**********": "You are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix."
 },
 {
  "**********": "The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were."
 },
 {
  "**********": "If the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: mat = [[1,2],[3,4]], r = 1, c = 4Output: [[1,2,3,4]]Example 2:"
 },
 {
  "**********": "Input: mat = [[1,2],[3,4]], r = 2, c = 4Output: [[1,2],[3,4]]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "m == mat.length"
 },
 {
  "**********": "n == mat[i].length"
 },
 {
  "**********": "1 <= m, n <= 100"
 },
 {
  "**********": "-1000 <= mat[i][j] <= 1000"
 },
 {
  "**********": "1 <= r, c <= 300"
 },
 {
  "**********": "****************************572. Subtree of Another Tree"
 },
 null,
 {
  "**********": "****************************Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise."
 },
 {
  "**********": "A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [3,4,5,1,2], subRoot = [4,1,2]Output: trueExample 2:"
 },
 {
  "**********": "Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the root tree is in the range [1, 2000]."
 },
 {
  "**********": "The number of nodes in the subRoot tree is in the range [1, 1000]."
 },
 {
  "**********": "-104 <= root.val <= 104"
 },
 {
  "**********": "-104 <= subRoot.val <= 104"
 },
 {
  "**********": "***********************575. Distribute Candies"
 },
 null,
 {
  "**********": "***********************Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor."
 },
 {
  "**********": "The doctor advised Alice to only eat n \/ 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice."
 },
 {
  "**********": "Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n \/ 2 of them."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: candyType = [1,1,2,2,3,3]Output: 3Explanation: Alice can only eat 6 \/ 2 = 3 candies. Since there are only 3 types, she can eat one of each type.Example 2:"
 },
 {
  "**********": "Input: candyType = [1,1,2,3]Output: 2Explanation: Alice can only eat 4 \/ 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.Example 3:"
 },
 {
  "**********": "Input: candyType = [6,6,6,6]Output: 1Explanation: Alice can only eat 4 \/ 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "n == candyType.length"
 },
 {
  "**********": "2 <= n <= 104"
 },
 {
  "**********": "n is even."
 },
 {
  "**********": "-105 <= candyType[i] <= 105"
 },
 {
  "**********": "**********************************589. N-ary Tree Preorder Traversal"
 },
 null,
 {
  "**********": "**********************************Given the root of an n-ary tree, return the preorder traversal of its nodes' values."
 },
 {
  "**********": "Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)"
 },
 null,
 {
  "**********": "Example 1:"
 },
 null,
 {
  "**********": "Input: root = [1,null,3,2,4,null,5,6]Output: [1,3,5,6,2,4]Example 2:"
 },
 null,
 {
  "**********": "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]Output: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [0, 104]."
 },
 {
  "**********": "0 <= Node.val <= 104"
 },
 {
  "**********": "The height of the n-ary tree is less than or equal to 1000."
 },
 null,
 {
  "**********": "Follow up: Recursive solution is trivial, could you do it iteratively?"
 },
 {
  "**********": "***********************************590. N-ary Tree Postorder Traversal"
 },
 null,
 {
  "**********": "***********************************Given the root of an n-ary tree, return the postorder traversal of its nodes' values."
 },
 {
  "**********": "Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)"
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [1,null,3,2,4,null,5,6]Output: [5,6,3,2,4,1]Example 2:"
 },
 {
  "**********": "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]Output: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [0, 104]."
 },
 {
  "**********": "0 <= Node.val <= 104"
 },
 {
  "**********": "The height of the n-ary tree is less than or equal to 1000."
 },
 null,
 {
  "**********": "Follow up: Recursive solution is trivial, could you do it iteratively?"
 },
 {
  "**********": "***********************************594. Longest Harmonious Subsequence"
 },
 null,
 {
  "**********": "***********************************We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly1."
 },
 {
  "**********": "Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences."
 },
 {
  "**********": "A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,3,2,2,5,2,3,7]Output: 5Explanation: The longest harmonious subsequence is [3,2,2,2,3].Example 2:"
 },
 {
  "**********": "Input: nums = [1,2,3,4]Output: 2Example 3:"
 },
 {
  "**********": "Input: nums = [1,1,1,1]Output: 0"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 2 * 104"
 },
 {
  "**********": "-109 <= nums[i] <= 109"
 },
 {
  "**********": "**********************598. Range Addition II"
 },
 null,
 {
  "**********": "**********************You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi."
 },
 {
  "**********": "Count and return the number of maximum integers in the matrix after performing all the operations."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: m = 3, n = 3, ops = [[2,2],[3,3]]Output: 4Explanation: The maximum integer in M is 2, and there are four of it in M. So return 4.Example 2:"
 },
 {
  "**********": "Input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]Output: 4Example 3:"
 },
 {
  "**********": "Input: m = 3, n = 3, ops = []Output: 9"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= m, n <= 4 * 104"
 },
 {
  "**********": "0 <= ops.length <= 104"
 },
 {
  "**********": "ops[i].length == 2"
 },
 {
  "**********": "1 <= ai <= m"
 },
 {
  "**********": "1 <= bi <= n"
 },
 {
  "**********": "***********************************599. Minimum Index Sum of Two Lists"
 },
 null,
 {
  "**********": "***********************************Given two arrays of strings list1 and list2, find the common strings with the least index sum."
 },
 {
  "**********": "A common string is a string that appeared in both list1 and list2."
 },
 {
  "**********": "A common string with the least index sum is a common string such that if it appeared at list1[i] and list2[j] then i + j should be the minimum value among all the other common strings."
 },
 {
  "**********": "Return all the common strings with the least index sum. Return the answer in any order."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]Output: [\"Shogun\"]Explanation: The only common string is \"Shogun\".Example 2:"
 },
 {
  "**********": "Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]Output: [\"Shogun\"]Explanation: The common string with the least index sum is \"Shogun\" with index sum = (0 + 1) = 1.Example 3:"
 },
 {
  "**********": "Input: list1 = [\"happy\",\"sad\",\"good\"], list2 = [\"sad\",\"happy\",\"good\"]Output: [\"sad\",\"happy\"]Explanation: There are three common strings:\"happy\" with index sum = (0 + 1) = 1.\"sad\" with index sum = (1 + 0) = 1.\"good\" with index sum = (2 + 2) = 4.The strings with the least index sum are \"sad\" and \"happy\"."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= list1.length, list2.length <= 1000"
 },
 {
  "**********": "1 <= list1[i].length, list2[i].length <= 30"
 },
 {
  "**********": "list1[i] and list2[i] consist of spaces ' ' and English letters."
 },
 {
  "**********": "All the strings of list1 are unique."
 },
 {
  "**********": "All the strings of list2 are unique."
 },
 {
  "**********": "**********************605. Can Place Flowers"
 },
 null,
 {
  "**********": "**********************You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots."
 },
 {
  "**********": "Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return ifn new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: flowerbed = [1,0,0,0,1], n = 1Output: trueExample 2:"
 },
 {
  "**********": "Input: flowerbed = [1,0,0,0,1], n = 2Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= flowerbed.length <= 2 * 104"
 },
 {
  "**********": "flowerbed[i] is 0 or 1."
 },
 {
  "**********": "There are no two adjacent flowers in flowerbed."
 },
 {
  "**********": "0 <= n <= flowerbed.length"
 },
 {
  "**********": "**************************************606. Construct String from Binary Tree"
 },
 null,
 {
  "**********": "**************************************Given the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it."
 },
 {
  "**********": "Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [1,2,3,4]Output: \"1(2(4))(3)\"Explanation: Originally, it needs to be \"1(2(4)())(3()())\", but you need to omit all the unnecessary empty parenthesis pairs. And it will be \"1(2(4))(3)\"Example 2:"
 },
 {
  "**********": "Input: root = [1,2,3,null,4]Output: \"1(2()(4))(3)\"Explanation: Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [1, 104]."
 },
 {
  "**********": "-1000 <= Node.val <= 1000"
 },
 {
  "**********": "***************************617. Merge Two Binary Trees"
 },
 null,
 {
  "**********": "***************************You are given two binary trees root1 and root2."
 },
 {
  "**********": "Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree."
 },
 {
  "**********": "Return the merged tree."
 },
 {
  "**********": "Note: The merging process must start from the root nodes of both trees."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]Output: [3,4,5,5,4,null,7]Example 2:"
 },
 {
  "**********": "Input: root1 = [1], root2 = [1,2]Output: [2,2]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in both trees is in the range [0, 2000]."
 },
 {
  "**********": "-104 <= Node.val <= 104"
 },
 {
  "**********": "*************************************628. Maximum Product of Three Numbers"
 },
 null,
 {
  "**********": "*************************************Given an integer array nums, find three numbers whose product is maximum and return the maximum product."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,2,3]Output: 6Example 2:"
 },
 {
  "**********": "Input: nums = [1,2,3,4]Output: 24Example 3:"
 },
 {
  "**********": "Input: nums = [-1,-2,-3]Output: -6"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "3 <= nums.length <= 104"
 },
 {
  "**********": "-1000 <= nums[i] <= 1000"
 },
 {
  "**********": "*************************************637. Average of Levels in Binary Tree"
 },
 null,
 {
  "**********": "*************************************Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10-5 of the actual answer will be accepted."
 },
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [3,9,20,null,null,15,7]Output: [3.00000,14.50000,11.00000]Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.Hence return [3, 14.5, 11].Example 2:"
 },
 {
  "**********": "Input: root = [3,9,20,15,7]Output: [3.00000,14.50000,11.00000]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [1, 104]."
 },
 {
  "**********": "-231 <= Node.val <= 231 - 1"
 },
 {
  "**********": "*******************************643. Maximum Average Subarray I"
 },
 null,
 {
  "**********": "*******************************You are given an integer array nums consisting of n elements, and an integer k."
 },
 {
  "**********": "Find a contiguous subarray whose length is equal tok that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,12,-5,-6,50,3], k = 4Output: 12.75000Explanation: Maximum average is (12 - 5 - 6 + 50) \/ 4 = 51 \/ 4 = 12.75Example 2:"
 },
 {
  "**********": "Input: nums = [5], k = 1Output: 5.00000"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "n == nums.length"
 },
 {
  "**********": "1 <= k <= n <= 105"
 },
 {
  "**********": "-104 <= nums[i] <= 104"
 },
 {
  "**********": "*****************645. Set Mismatch"
 },
 null,
 {
  "**********": "*****************You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number."
 },
 {
  "**********": "You are given an integer array nums representing the data status of this set after the error."
 },
 {
  "**********": "Find the number that occurs twice and the number that is missing and return them in the form of an array."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,2,2,4]Output: [2,3]Example 2:"
 },
 {
  "**********": "Input: nums = [1,1]Output: [1,2]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "2 <= nums.length <= 104"
 },
 {
  "**********": "1 <= nums[i] <= 104"
 },
 {
  "**********": "********************************653. Two Sum IV - Input is a BST"
 },
 null,
 {
  "**********": "********************************Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [5,3,6,2,4,null,7], k = 9Output: trueExample 2:"
 },
 {
  "**********": "Input: root = [5,3,6,2,4,null,7], k = 28Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [1, 104]."
 },
 {
  "**********": "-104 <= Node.val <= 104"
 },
 {
  "**********": "root is guaranteed to be a valid binary search tree."
 },
 {
  "**********": "-105 <= k <= 105"
 },
 {
  "**********": "***************************657. Robot Return to Origin"
 },
 null,
 {
  "**********": "***************************There is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves."
 },
 {
  "**********": "You are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. Valid moves are 'R' (right), 'L' (left), 'U' (up), and 'D' (down)."
 },
 {
  "**********": "Return true if the robot returns to the origin after it finishes all of its moves, or false otherwise."
 },
 {
  "**********": "Note: The way that the robot is \"facing\" is irrelevant. 'R' will always make the robot move to the right once, 'L' will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: moves = \"UD\"Output: trueExplanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.Example 2:"
 },
 {
  "**********": "Input: moves = \"LL\"Output: falseExplanation: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= moves.length <= 2 * 104"
 },
 {
  "**********": "moves only contains the characters 'U', 'D', 'L' and 'R'."
 },
 {
  "**********": "*******************661. Image Smoother"
 },
 null,
 {
  "**********": "*******************An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother)."
 },
 {
  "**********": "Given an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: img = [[1,1,1],[1,0,1],[1,1,1]]Output: [[0,0,0],[0,0,0],[0,0,0]]Explanation:For the points (0,0), (0,2), (2,0), (2,2): floor(3\/4) = floor(0.75) = 0For the points (0,1), (1,0), (1,2), (2,1): floor(5\/6) = floor(0.83333333) = 0For the point (1,1): floor(8\/9) = floor(0.88888889) = 0Example 2:"
 },
 {
  "**********": "Input: img = [[100,200,100],[200,50,200],[100,200,100]]Output: [[137,141,137],[141,138,141],[137,141,137]]Explanation:For the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)\/4) = floor(137.5) = 137For the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)\/6) = floor(141.666667) = 141For the point (1,1): floor((50+200+200+200+200+100+100+100+100)\/9) = floor(138.888889) = 138"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "m == img.length"
 },
 {
  "**********": "n == img[i].length"
 },
 {
  "**********": "1 <= m, n <= 200"
 },
 {
  "**********": "0 <= img[i][j] <= 255"
 },
 {
  "**********": "*****************************************671. Second Minimum Node In a Binary Tree"
 },
 null,
 {
  "**********": "*****************************************Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds."
 },
 {
  "**********": "Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree."
 },
 {
  "**********": "If no such second minimum value exists, output -1 instead."
 },
 null,
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [2,2,5,null,null,5,7]Output: 5Explanation: The smallest value is 2, the second smallest value is 5.Example 2:"
 },
 {
  "**********": "Input: root = [2,2,2]Output: -1Explanation: The smallest value is 2, but there isn't any second smallest value."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [1, 25]."
 },
 {
  "**********": "1 <= Node.val <= 231 - 1"
 },
 {
  "**********": "root.val == min(root.left.val, root.right.val) for each internal node of the tree."
 },
 {
  "**********": "**********************************************674. Longest Continuous Increasing Subsequence"
 },
 null,
 {
  "**********": "**********************************************Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing."
 },
 {
  "**********": "A continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1]."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,3,5,4,7]Output: 3Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element4.Example 2:"
 },
 {
  "**********": "Input: nums = [2,2,2,2,2]Output: 1Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictlyincreasing."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 104"
 },
 {
  "**********": "-109 <= nums[i] <= 109"
 },
 {
  "**********": "************************680. Valid Palindrome II"
 },
 null,
 {
  "**********": "************************Given a string s, return trueif the s can be palindrome after deleting at most one character from it."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"aba\"Output: trueExample 2:"
 },
 {
  "**********": "Input: s = \"abca\"Output: trueExplanation: You could delete the character 'c'.Example 3:"
 },
 {
  "**********": "Input: s = \"abc\"Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 105"
 },
 {
  "**********": "s consists of lowercase English letters."
 },
 {
  "**********": "******************682. Baseball Game"
 },
 null,
 {
  "**********": "******************You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record."
 },
 {
  "**********": "You are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following:"
 },
 {
  "**********": "An integer x."
 },
 {
  "**********": "Record a new score of x."
 },
 {
  "**********": "+'."
 },
 {
  "**********": "Record a new score that is the sum of the previous two scores."
 },
 {
  "**********": "D'."
 },
 {
  "**********": "Record a new score that is the double of the previous score."
 },
 {
  "**********": "C'."
 },
 {
  "**********": "Invalidate the previous score, removing it from the record."
 },
 {
  "**********": "Return the sum of all the scores on the record after applying all the operations."
 },
 {
  "**********": "The test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]Output: 30Explanation:\"5\" - Add 5 to the record, record is now [5].\"2\" - Add 2 to the record, record is now [5, 2].\"C\" - Invalidate and remove the previous score, record is now [5].\"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10].\"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].The total sum is 5 + 10 + 15 = 30.Example 2:"
 },
 {
  "**********": "Input: ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]Output: 27Explanation:\"5\" - Add 5 to the record, record is now [5].\"-2\" - Add -2 to the record, record is now [5, -2].\"4\" - Add 4 to the record, record is now [5, -2, 4].\"C\" - Invalidate and remove the previous score, record is now [5, -2].\"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\"9\" - Add 9 to the record, record is now [5, -2, -4, 9].\"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.Example 3:"
 },
 {
  "**********": "Input: ops = [\"1\",\"C\"]Output: 0Explanation:\"1\" - Add 1 to the record, record is now [1].\"C\" - Invalidate and remove the previous score, record is now [].Since the record is empty, the total sum is 0."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= operations.length <= 1000"
 },
 {
  "**********": "operations[i] is \"C\", \"D\", \"+\", or a string representing an integer in the range [-3 * 104, 3 * 104]."
 },
 {
  "**********": "For operation \"+\", there will always be at least two previous scores on the record."
 },
 {
  "**********": "For operations \"C\" and \"D\", there will always be at least one previous score on the record."
 },
 {
  "**********": "****************************************693. Binary Number with Alternating Bits"
 },
 null,
 {
  "**********": "****************************************Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 5Output: trueExplanation: The binary representation of 5 is: 101Example 2:"
 },
 {
  "**********": "Input: n = 7Output: falseExplanation: The binary representation of 7 is: 111.Example 3:"
 },
 {
  "**********": "Input: n = 11Output: falseExplanation: The binary representation of 11 is: 1011."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 231 - 1"
 },
 {
  "**********": "****************************696. Count Binary Substrings"
 },
 null,
 {
  "**********": "****************************Given a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively."
 },
 {
  "**********": "Substrings that occur multiple times are counted the number of times they occur."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"00110011\"Output: 6Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".Notice that some of these substrings repeat and are counted the number of times they occur.Also, \"00110011\" is not a valid substring because all the 0's (and 1's) are not grouped together.Example 2:"
 },
 {
  "**********": "Input: s = \"10101\"Output: 4Explanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 105"
 },
 {
  "**********": "s[i] is either '0' or '1'."
 },
 {
  "**********": "***********************697. Degree of an Array"
 },
 null,
 {
  "**********": "***********************Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements."
 },
 {
  "**********": "Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,2,2,3,1]Output: 2Explanation: The input array has a degree of 2 because both elements 1 and 2 appear twice.Of the subarrays that have the same degree:[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]The shortest length is 2. So return 2.Example 2:"
 },
 {
  "**********": "Input: nums = [1,2,2,3,1,4,2]Output: 6Explanation: The degree is 3 because the element 2 is repeated 3 times.So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "nums.length will be between 1 and 50,000."
 },
 {
  "**********": "nums[i] will be an integer between 0 and 49,999."
 },
 {
  "**********": "***********************************700. Search in a Binary Search Tree"
 },
 null,
 {
  "**********": "***********************************You are given the root of a binary search tree (BST) and an integer val."
 },
 {
  "**********": "Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [4,2,7,1,3], val = 2Output: [2,1,3]Example 2:"
 },
 {
  "**********": "Input: root = [4,2,7,1,3], val = 5Output: []"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [1, 5000]."
 },
 {
  "**********": "1 <= Node.val <= 107"
 },
 {
  "**********": "root is a binary search tree."
 },
 {
  "**********": "1 <= val <= 107"
 },
 {
  "**********": "************************************703. Kth Largest Element in a Stream"
 },
 null,
 {
  "**********": "************************************Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element."
 },
 {
  "**********": "Implement KthLargest class:"
 },
 {
  "**********": "KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums."
 },
 {
  "**********": "int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"][[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]Output[null, 4, 5, 5, 8, 8]\nExplanationKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);kthLargest.add(3);   \/\/ return 4kthLargest.add(5);   \/\/ return 5kthLargest.add(10);  \/\/ return 5kthLargest.add(9);   \/\/ return 8kthLargest.add(4);   \/\/ return 8"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= k <= 104"
 },
 {
  "**********": "0 <= nums.length <= 104"
 },
 {
  "**********": "-104 <= nums[i] <= 104"
 },
 {
  "**********": "-104 <= val <= 104"
 },
 {
  "**********": "At most 104 calls will be made to add."
 },
 {
  "**********": "It is guaranteed that there will be at least k elements in the array when you search for the kth element."
 },
 {
  "**********": "******************704. Binary Search"
 },
 null,
 {
  "**********": "******************Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1."
 },
 {
  "**********": "You must write an algorithm with O(log n) runtime complexity."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [-1,0,3,5,9,12], target = 9Output: 4Explanation: 9 exists in nums and its index is 4Example 2:"
 },
 {
  "**********": "Input: nums = [-1,0,3,5,9,12], target = 2Output: -1Explanation: 2 does not exist in nums so return -1"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 104"
 },
 {
  "**********": "-104 < nums[i], target < 104"
 },
 {
  "**********": "All the integers in nums are unique."
 },
 {
  "**********": "nums is sorted in ascending order."
 },
 {
  "**********": "*******************705. Design HashSet"
 },
 null,
 {
  "**********": "*******************Design a HashSet without using any built-in hash table libraries."
 },
 {
  "**********": "Implement MyHashSet class:"
 },
 {
  "**********": "void add(key) Inserts the value key into the HashSet."
 },
 {
  "**********": "bool contains(key) Returns whether the value key exists in the HashSet or not."
 },
 {
  "**********": "void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"][[], [1], [2], [1], [3], [2], [2], [2], [2]]Output[null, null, null, true, false, null, true, null, false]\nExplanationMyHashSet myHashSet = new MyHashSet();myHashSet.add(1);      \/\/ set = [1]myHashSet.add(2);      \/\/ set = [1, 2]myHashSet.contains(1); \/\/ return TruemyHashSet.contains(3); \/\/ return False, (not found)myHashSet.add(2);      \/\/ set = [1, 2]myHashSet.contains(2); \/\/ return TruemyHashSet.remove(2);   \/\/ set = [1]myHashSet.contains(2); \/\/ return False, (already removed)"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= key <= 106"
 },
 {
  "**********": "At most 104 calls will be made to add, remove, and contains."
 },
 {
  "**********": "*******************706. Design HashMap"
 },
 null,
 {
  "**********": "*******************Design a HashMap without using any built-in hash table libraries."
 },
 {
  "**********": "Implement the MyHashMap class:"
 },
 {
  "**********": "MyHashMap() initializes the object with an empty map."
 },
 {
  "**********": "void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value."
 },
 {
  "**********": "int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key."
 },
 {
  "**********": "void remove(key) removes the key and its corresponding value if the map contains the mapping for the key."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"][[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]Output[null, null, null, 1, -1, null, 1, null, -1]\nExplanationMyHashMap myHashMap = new MyHashMap();myHashMap.put(1, 1); \/\/ The map is now [[1,1]]myHashMap.put(2, 2); \/\/ The map is now [[1,1], [2,2]]myHashMap.get(1);    \/\/ return 1, The map is now [[1,1], [2,2]]myHashMap.get(3);    \/\/ return -1 (i.e., not found), The map is now [[1,1], [2,2]]myHashMap.put(2, 1); \/\/ The map is now [[1,1], [2,1]] (i.e., update the existing value)myHashMap.get(2);    \/\/ return 1, The map is now [[1,1], [2,1]]myHashMap.remove(2); \/\/ remove the mapping for 2, The map is now [[1,1]]myHashMap.get(2);    \/\/ return -1 (i.e., not found), The map is now [[1,1]]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= key, value <= 106"
 },
 {
  "**********": "At most 104 calls will be made to put, get, and remove."
 },
 {
  "**********": "******************709. To Lower Case"
 },
 null,
 {
  "**********": "******************Given a string s, return the string after replacing every uppercase letter with the same lowercase letter."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"Hello\"Output: \"hello\"Example 2:"
 },
 {
  "**********": "Input: s = \"here\"Output: \"here\"Example 3:"
 },
 {
  "**********": "Input: s = \"LOVELY\"Output: \"lovely\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 100"
 },
 {
  "**********": "s consists of printable ASCII characters."
 },
 {
  "**********": "*******************************717. 1-bit and 2-bit Characters"
 },
 null,
 {
  "**********": "*******************************We have two special characters:"
 },
 {
  "**********": "The first character can be represented by one bit 0."
 },
 {
  "**********": "The second character can be represented by two bits (10 or 11)."
 },
 {
  "**********": "Given a binary array bits that ends with 0, return true if the last character must be a one-bit character."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: bits = [1,0,0]Output: trueExplanation: The only way to decode it is two-bit character and one-bit character.So the last character is one-bit character.Example 2:"
 },
 {
  "**********": "Input: bits = [1,1,1,0]Output: falseExplanation: The only way to decode it is two-bit character and two-bit character.So the last character is not one-bit character."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= bits.length <= 1000"
 },
 {
  "**********": "bits[i] is either 0 or 1."
 },
 {
  "**********": "*********************724. Find Pivot Index"
 },
 null,
 {
  "**********": "*********************Given an array of integers nums, calculate the pivot index of this array."
 },
 {
  "**********": "The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right."
 },
 {
  "**********": "If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array."
 },
 {
  "**********": "Return the leftmost pivot index. If no such index exists, return -1."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,7,3,6,5,6]Output: 3Explanation:The pivot index is 3.Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11Right sum = nums[4] + nums[5] = 5 + 6 = 11Example 2:"
 },
 {
  "**********": "Input: nums = [1,2,3]Output: -1Explanation:There is no index that satisfies the conditions in the problem statement.Example 3:"
 },
 {
  "**********": "Input: nums = [2,1,-1]Output: 0Explanation:The pivot index is 0.Left sum = 0 (no elements to the left of index 0)Right sum = nums[1] + nums[2] = 1 + -1 = 0"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 104"
 },
 {
  "**********": "-1000 <= nums[i] <= 1000"
 },
 null,
 {
  "**********": "Note: This question is the same as 1991: https:\/\/leetcode.com\/problems\/find-the-middle-index-in-array\/"
 },
 {
  "**********": "**************************728. Self Dividing Numbers"
 },
 null,
 {
  "**********": "**************************A self-dividing number is a number that is divisible by every digit it contains."
 },
 {
  "**********": "For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0."
 },
 {
  "**********": "A self-dividing number is not allowed to contain the digit zero."
 },
 {
  "**********": "Given two integers left and right, return a list of all the self-dividing numbers in the range[left, right]."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: left = 1, right = 22Output: [1,2,3,4,5,6,7,8,9,11,12,15,22]Example 2:"
 },
 {
  "**********": "Input: left = 47, right = 85Output: [48,55,66,77]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= left <= right <= 104"
 },
 {
  "**********": "***************733. Flood Fill"
 },
 null,
 {
  "**********": "***************An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image."
 },
 {
  "**********": "You are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc]."
 },
 {
  "**********": "To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color."
 },
 {
  "**********": "Return the modified image after performing the flood fill."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2Output: [[2,2,2],[2,2,0],[2,0,1]]Explanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.Note the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.Example 2:"
 },
 {
  "**********": "Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0Output: [[0,0,0],[0,0,0]]Explanation: The starting pixel is already colored 0, so no changes are made to the image."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "m == image.length"
 },
 {
  "**********": "n == image[i].length"
 },
 {
  "**********": "1 <= m, n <= 50"
 },
 {
  "**********": "0 <= image[i][j], color < 216"
 },
 {
  "**********": "0 <= sr < m"
 },
 {
  "**********": "0 <= sc < n"
 },
 {
  "**********": "*********************************************744. Find Smallest Letter Greater Than Target"
 },
 null,
 {
  "**********": "*********************************************Given a characters array letters that is sorted in non-decreasing order and a character target, return the smallest character in the array that is larger than target."
 },
 {
  "**********": "Note that the letters wrap around."
 },
 {
  "**********": "For example, if target == 'z' and letters == ['a', 'b'], the answer is 'a'."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: letters = [\"c\",\"f\",\"j\"], target = \"a\"Output: \"c\"Example 2:"
 },
 {
  "**********": "Input: letters = [\"c\",\"f\",\"j\"], target = \"c\"Output: \"f\"Example 3:"
 },
 {
  "**********": "Input: letters = [\"c\",\"f\",\"j\"], target = \"d\"Output: \"f\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "2 <= letters.length <= 104"
 },
 {
  "**********": "letters[i] is a lowercase English letter."
 },
 {
  "**********": "letters is sorted in non-decreasing order."
 },
 {
  "**********": "letters contains at least two different characters."
 },
 {
  "**********": "target is a lowercase English letter."
 },
 {
  "**********": "*****************************746. Min Cost Climbing Stairs"
 },
 null,
 {
  "**********": "*****************************You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps."
 },
 {
  "**********": "You can either start from the step with index 0, or the step with index 1."
 },
 {
  "**********": "Return the minimum cost to reach the top of the floor."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: cost = [10,15,20]Output: 15Explanation: You will start at index 1.- Pay 15 and climb two steps to reach the top.The total cost is 15.Example 2:"
 },
 {
  "**********": "Input: cost = [1,100,1,1,1,100,1,1,100,1]Output: 6Explanation: You will start at index 0.- Pay 1 and climb two steps to reach index 2.- Pay 1 and climb two steps to reach index 4.- Pay 1 and climb two steps to reach index 6.- Pay 1 and climb one step to reach index 7.- Pay 1 and climb two steps to reach index 9.- Pay 1 and climb one step to reach the top.The total cost is 6."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "2 <= cost.length <= 1000"
 },
 {
  "**********": "0 <= cost[i] <= 999"
 },
 {
  "**********": "********************************************747. Largest Number At Least Twice of Others"
 },
 null,
 {
  "**********": "********************************************You are given an integer array nums where the largest integer is unique."
 },
 {
  "**********": "Determine whether the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, or return -1 otherwise."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [3,6,1,0]Output: 1Explanation: 6 is the largest integer.For every other number in the array x, 6 is at least twice as big as x.The index of value 6 is 1, so we return 1.Example 2:"
 },
 {
  "**********": "Input: nums = [1,2,3,4]Output: -1Explanation: 4 is less than twice the value of 3, so we return -1."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "2 <= nums.length <= 50"
 },
 {
  "**********": "0 <= nums[i] <= 100"
 },
 {
  "**********": "The largest element in nums is unique."
 },
 {
  "**********": "*****************************748. Shortest Completing Word"
 },
 null,
 {
  "**********": "*****************************Given a string licensePlate and an array of strings words, find the shortest completing word in words."
 },
 {
  "**********": "A completing word is a word that contains all the letters in licensePlate. Ignore numbers and spaces in licensePlate, and treat letters as case insensitive. If a letter appears more than once in licensePlate, then it must appear in the word the same number of times or more."
 },
 {
  "**********": "For example, if licensePlate = \"aBc 12c\", then it contains letters 'a', 'b' (ignoring case), and 'c' twice. Possible completing words are \"abccdef\", \"caaacab\", and \"cbca\"."
 },
 {
  "**********": "Return the shortest completing word in words. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in words."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]Output: \"steps\"Explanation: licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.\"step\" contains 't' and 'p', but only contains 1 's'.\"steps\" contains 't', 'p', and both 's' characters.\"stripe\" is missing an 's'.\"stepple\" is missing an 's'.Since \"steps\" is the only word containing all the letters, that is the answer.Example 2:"
 },
 {
  "**********": "Input: licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]Output: \"pest\"Explanation: licensePlate only contains the letter 's'. All the words contain 's', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= licensePlate.length <= 7"
 },
 {
  "**********": "licensePlate contains digits, letters (uppercase or lowercase), or space ' '."
 },
 {
  "**********": "1 <= words.length <= 1000"
 },
 {
  "**********": "1 <= words[i].length <= 15"
 },
 {
  "**********": "words[i] consists of lower case English letters."
 },
 {
  "**********": "******************************************************762. Prime Number of Set Bits in Binary Representation"
 },
 null,
 {
  "**********": "******************************************************Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation."
 },
 {
  "**********": "Recall that the number of set bits an integer has is the number of 1's present when written in binary."
 },
 {
  "**********": "For example, 21 written in binary is 10101, which has 3 set bits."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: left = 6, right = 10Output: 4Explanation:6  -> 110 (2 set bits, 2 is prime)7  -> 111 (3 set bits, 3 is prime)8  -> 1000 (1 set bit, 1 is not prime)9  -> 1001 (2 set bits, 2 is prime)10 -> 1010 (2 set bits, 2 is prime)4 numbers have a prime number of set bits.Example 2:"
 },
 {
  "**********": "Input: left = 10, right = 15Output: 5Explanation:10 -> 1010 (2 set bits, 2 is prime)11 -> 1011 (3 set bits, 3 is prime)12 -> 1100 (2 set bits, 2 is prime)13 -> 1101 (3 set bits, 3 is prime)14 -> 1110 (3 set bits, 3 is prime)15 -> 1111 (4 set bits, 4 is not prime)5 numbers have a prime number of set bits."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= left <= right <= 106"
 },
 {
  "**********": "0 <= right - left <= 104"
 },
 {
  "**********": "********************766. Toeplitz Matrix"
 },
 null,
 {
  "**********": "********************Given an m x nmatrix, return true if the matrix is Toeplitz. Otherwise, return false."
 },
 {
  "**********": "A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]Output: trueExplanation:In the above grid, the diagonals are:\"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\".In each diagonal all elements are the same, so the answer is True.Example 2:"
 },
 {
  "**********": "Input: matrix = [[1,2],[2,2]]Output: falseExplanation:The diagonal \"[1, 2]\" has different elements."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "m == matrix.length"
 },
 {
  "**********": "n == matrix[i].length"
 },
 {
  "**********": "1 <= m, n <= 20"
 },
 {
  "**********": "0 <= matrix[i][j] <= 99"
 },
 null,
 {
  "**********": "Follow up:"
 },
 {
  "**********": "What if the matrix is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?"
 },
 {
  "**********": "What if the matrix is so large that you can only load up a partial row into the memory at once?"
 },
 {
  "**********": "**********************771. Jewels and Stones"
 },
 null,
 {
  "**********": "**********************You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels."
 },
 {
  "**********": "Letters are case sensitive, so \"a\" is considered a different type of stone from \"A\"."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: jewels = \"aA\", stones = \"aAAbbbb\"Output: 3Example 2:"
 },
 {
  "**********": "Input: jewels = \"z\", stones = \"ZZ\"Output: 0"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= jewels.length, stones.length <= 50"
 },
 {
  "**********": "jewels and stones consist of only English letters."
 },
 {
  "**********": "All the characters of jewels are unique."
 },
 {
  "**********": "***************************************783. Minimum Distance Between BST Nodes"
 },
 null,
 {
  "**********": "***************************************Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [4,2,6,1,3]Output: 1Example 2:"
 },
 {
  "**********": "Input: root = [1,0,48,null,null,12,49]Output: 1"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [2, 100]."
 },
 {
  "**********": "0 <= Node.val <= 105"
 },
 null,
 {
  "**********": "Note: This question is the same as 530: https:\/\/leetcode.com\/problems\/minimum-absolute-difference-in-bst\/"
 },
 {
  "**********": "******************796. Rotate String"
 },
 null,
 {
  "**********": "******************Given two strings s and goal, return trueif and only ifscan becomegoalafter some number of shifts ons."
 },
 {
  "**********": "A shift on s consists of moving the leftmost character of s to the rightmost position."
 },
 {
  "**********": "For example, if s = \"abcde\", then it will be \"bcdea\" after one shift."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"abcde\", goal = \"cdeab\"Output: trueExample 2:"
 },
 {
  "**********": "Input: s = \"abcde\", goal = \"abced\"Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length, goal.length <= 100"
 },
 {
  "**********": "s and goal consist of lowercase English letters."
 },
 {
  "**********": "****************************804. Unique Morse Code Words"
 },
 null,
 {
  "**********": "****************************International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:"
 },
 {
  "**********": "a' maps to \".-\","
 },
 {
  "**********": "b' maps to \"-...\","
 },
 {
  "**********": "c' maps to \"-.-.\", and so on."
 },
 {
  "**********": "For convenience, the full table for the 26 letters of the English alphabet is given below:"
 },
 {
  "**********": "[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]Given an array of strings words where each word can be written as a concatenation of the Morse code of each letter."
 },
 {
  "**********": "For example, \"cab\" can be written as \"-.-..--...\", which is the concatenation of \"-.-.\", \".-\", and \"-...\". We will call such a concatenation the transformation of a word."
 },
 {
  "**********": "Return the number of different transformations among all words we have."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: words = [\"gin\",\"zen\",\"gig\",\"msg\"]Output: 2Explanation: The transformation of each word is:\"gin\" -> \"--...-.\"\"zen\" -> \"--...-.\"\"gig\" -> \"--...--.\"\"msg\" -> \"--...--.\"There are 2 different transformations: \"--...-.\" and \"--...--.\".Example 2:"
 },
 {
  "**********": "Input: words = [\"a\"]Output: 1"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= words.length <= 100"
 },
 {
  "**********": "1 <= words[i].length <= 12"
 },
 {
  "**********": "words[i] consists of lowercase English letters."
 },
 {
  "**********": "************************************806. Number of Lines To Write String"
 },
 null,
 {
  "**********": "************************************You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on."
 },
 {
  "**********": "You are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. Continue this process until you have written all of s."
 },
 {
  "**********": "Return an array result of length 2 where:"
 },
 {
  "**********": "result[0] is the total number of lines."
 },
 {
  "**********": "result[1] is the width of the last line in pixels."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"Output: [3,60]Explanation: You can write s as follows:abcdefghij  \/\/ 100 pixels wideklmnopqrst  \/\/ 100 pixels wideuvwxyz      \/\/ 60 pixels wideThere are a total of 3 lines, and the last line is 60 pixels wide.Example 2:"
 },
 {
  "**********": "Input: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"Output: [2,4]Explanation: You can write s as follows:bbbcccdddaa  \/\/ 98 pixels widea            \/\/ 4 pixels wideThere are a total of 2 lines, and the last line is 4 pixels wide."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "widths.length == 26"
 },
 {
  "**********": "2 <= widths[i] <= 10"
 },
 {
  "**********": "1 <= s.length <= 1000"
 },
 {
  "**********": "s contains only lowercase English letters."
 },
 {
  "**********": "**************************812. Largest Triangle Area"
 },
 null,
 {
  "**********": "**************************Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10-5 of the actual answer will be accepted."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]Output: 2.00000Explanation: The five points are shown in the above figure. The red triangle is the largest.Example 2:"
 },
 {
  "**********": "Input: points = [[1,0],[0,0],[0,1]]Output: 0.50000"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "3 <= points.length <= 50"
 },
 {
  "**********": "-50 <= xi, yi <= 50"
 },
 {
  "**********": "All the given points are unique."
 },
 {
  "**********": "*********************819. Most Common Word"
 },
 null,
 {
  "**********": "*********************Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique."
 },
 {
  "**********": "The words in paragraph are case-insensitive and the answer should be returned in lowercase."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]Output: \"ball\"Explanation: \"hit\" occurs 3 times, but it is a banned word.\"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. Note that words in the paragraph are not case sensitive,that punctuation is ignored (even if adjacent to words, such as \"ball,\"), and that \"hit\" isn't the answer even though it occurs more because it is banned.Example 2:"
 },
 {
  "**********": "Input: paragraph = \"a.\", banned = []Output: \"a\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= paragraph.length <= 1000"
 },
 {
  "**********": "paragraph consists of English letters, space ' ', or one of the symbols: \"!?',;.\"."
 },
 {
  "**********": "0 <= banned.length <= 100"
 },
 {
  "**********": "1 <= banned[i].length <= 10"
 },
 {
  "**********": "banned[i] consists of only lowercase English letters."
 },
 {
  "**********": "*************************************821. Shortest Distance to a Character"
 },
 null,
 {
  "**********": "*************************************Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s."
 },
 {
  "**********": "The distance between two indices i and j is abs(i - j), where abs is the absolute value function."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"loveleetcode\", c = \"e\"Output: [3,2,1,0,1,0,0,1,2,2,1,0]Explanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).The closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.The closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.For index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.The closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.Example 2:"
 },
 {
  "**********": "Input: s = \"aaab\", c = \"b\"Output: [3,2,1,0]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 104"
 },
 {
  "**********": "s[i] and c are lowercase English letters."
 },
 {
  "**********": "It is guaranteed that c occurs at least once in s."
 },
 {
  "**********": "***************824. Goat Latin"
 },
 null,
 {
  "**********": "***************You are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only."
 },
 {
  "**********": "We would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:"
 },
 {
  "**********": "If a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append \"ma\" to the end of the word."
 },
 {
  "**********": "For example, the word \"apple\" becomes \"applema\"."
 },
 {
  "**********": "If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add \"ma\"."
 },
 {
  "**********": "For example, the word \"goat\" becomes \"oatgma\"."
 },
 {
  "**********": "Add one letter 'a' to the end of each word per its word index in the sentence, starting with 1."
 },
 {
  "**********": "For example, the first word gets \"a\" added to the end, the second word gets \"aa\" added to the end, and so on."
 },
 {
  "**********": "Return the final sentence representing the conversion from sentence to Goat Latin."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: sentence = \"I speak Goat Latin\"Output: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"Example 2:"
 },
 {
  "**********": "Input: sentence = \"The quick brown fox jumped over the lazy dog\"Output: \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= sentence.length <= 150"
 },
 {
  "**********": "sentence consists of English letters and spaces."
 },
 {
  "**********": "sentence has no leading or trailing spaces."
 },
 {
  "**********": "All the words in sentence are separated by a single space."
 },
 {
  "**********": "******************************830. Positions of Large Groups"
 },
 null,
 {
  "**********": "******************************In a string s of lowercase letters, these letters form consecutive groups of the same character."
 },
 {
  "**********": "For example, a string like s = \"abbxxxxzyy\" has the groups \"a\", \"bb\", \"xxxx\", \"z\", and \"yy\"."
 },
 {
  "**********": "A group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group. In the above example, \"xxxx\" has the interval [3,6]."
 },
 {
  "**********": "A group is considered large if it has 3 or more characters."
 },
 {
  "**********": "Return the intervals of every large group sorted in increasing order by start index."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"abbxxxxzzy\"Output: [[3,6]]Explanation:\"xxxx\" is the only large group with start index 3 and end index 6.Example 2:"
 },
 {
  "**********": "Input: s = \"abc\"Output: []Explanation: We have groups \"a\", \"b\", and \"c\", none of which are large groups.Example 3:"
 },
 {
  "**********": "Input: s = \"abcdddeeeeaabbbcd\"Output: [[3,5],[6,9],[12,14]]Explanation: The large groups are \"ddd\", \"eeee\", and \"bbb\"."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 1000"
 },
 {
  "**********": "s contains lowercase English letters only."
 },
 {
  "**********": "**********************832. Flipping an Image"
 },
 null,
 {
  "**********": "**********************Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image."
 },
 {
  "**********": "To flip an image horizontally means that each row of the image is reversed."
 },
 {
  "**********": "For example, flipping [1,1,0] horizontally results in [0,1,1]."
 },
 {
  "**********": "To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0."
 },
 {
  "**********": "For example, inverting [0,1,1] results in [1,0,0]."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: image = [[1,1,0],[1,0,1],[0,0,0]]Output: [[1,0,0],[0,1,0],[1,1,1]]Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]Example 2:"
 },
 {
  "**********": "Input: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "n == image.length"
 },
 {
  "**********": "n == image[i].length"
 },
 {
  "**********": "1 <= n <= 20"
 },
 {
  "**********": "images[i][j] is either 0 or 1."
 },
 {
  "**********": "**********************836. Rectangle Overlap"
 },
 null,
 {
  "**********": "**********************An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis."
 },
 {
  "**********": "Two rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap."
 },
 {
  "**********": "Given two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]Output: trueExample 2:"
 },
 {
  "**********": "Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]Output: falseExample 3:"
 },
 {
  "**********": "Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "rec1.length == 4"
 },
 {
  "**********": "rec2.length == 4"
 },
 {
  "**********": "-109 <= rec1[i], rec2[i] <= 109"
 },
 {
  "**********": "rec1 and rec2 represent a valid rectangle with a non-zero area."
 },
 {
  "**********": "*****************************844. Backspace String Compare"
 },
 null,
 {
  "**********": "*****************************Given two strings s and t, return trueif they are equal when both are typed into empty text editors. '#' means a backspace character."
 },
 {
  "**********": "Note that after backspacing an empty text, the text will continue empty."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"ab#c\", t = \"ad#c\"Output: trueExplanation: Both s and t become \"ac\".Example 2:"
 },
 {
  "**********": "Input: s = \"ab##\", t = \"c#d#\"Output: trueExplanation: Both s and t become \"\".Example 3:"
 },
 {
  "**********": "Input: s = \"a#c\", t = \"b\"Output: falseExplanation: s becomes \"c\" while t becomes \"b\"."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length, t.length <= 200"
 },
 {
  "**********": "s and t only contain lowercase letters and '#' characters."
 },
 null,
 {
  "**********": "Follow up: Can you solve it in O(n) time and O(1) space?"
 },
 {
  "**********": "******************859. Buddy Strings"
 },
 null,
 {
  "**********": "******************Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false."
 },
 {
  "**********": "Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j]."
 },
 {
  "**********": "For example, swapping at indices 0 and 2 in \"abcd\" results in \"cbad\"."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"ab\", goal = \"ba\"Output: trueExplanation: You can swap s[0] = 'a' and s[1] = 'b' to get \"ba\", which is equal to goal.Example 2:"
 },
 {
  "**********": "Input: s = \"ab\", goal = \"ab\"Output: falseExplanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in \"ba\" != goal.Example 3:"
 },
 {
  "**********": "Input: s = \"aa\", goal = \"aa\"Output: trueExplanation: You can swap s[0] = 'a' and s[1] = 'a' to get \"aa\", which is equal to goal."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length, goal.length <= 2 * 104"
 },
 {
  "**********": "s and goal consist of lowercase letters."
 },
 {
  "**********": "********************860. Lemonade Change"
 },
 null,
 {
  "**********": "********************At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5."
 },
 {
  "**********": "Note that you do not have any change in hand at first."
 },
 {
  "**********": "Given an integer array bills where bills[i] is the bill the ith customer pays, return trueif you can provide every customer with the correct change, orfalseotherwise."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: bills = [5,5,5,10,20]Output: trueExplanation: From the first 3 customers, we collect three $5 bills in order.From the fourth customer, we collect a $10 bill and give back a $5.From the fifth customer, we give a $10 bill and a $5 bill.Since all customers got correct change, we output true.Example 2:"
 },
 {
  "**********": "Input: bills = [5,5,10,10,20]Output: falseExplanation: From the first two customers in order, we collect two $5 bills.For the next two customers in order, we collect a $10 bill and give back a $5 bill.For the last customer, we can not give the change of $15 back because we only have two $10 bills.Since not every customer received the correct change, the answer is false."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= bills.length <= 105"
 },
 {
  "**********": "bills[i] is either 5, 10, or 20."
 },
 {
  "**********": "*********************867. Transpose Matrix"
 },
 null,
 {
  "**********": "*********************Given a 2D integer array matrix, return the transpose ofmatrix."
 },
 {
  "**********": "The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices."
 },
 null,
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]Output: [[1,4,7],[2,5,8],[3,6,9]]Example 2:"
 },
 {
  "**********": "Input: matrix = [[1,2,3],[4,5,6]]Output: [[1,4],[2,5],[3,6]]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "m == matrix.length"
 },
 {
  "**********": "n == matrix[i].length"
 },
 {
  "**********": "1 <= m, n <= 1000"
 },
 {
  "**********": "1 <= m * n <= 105"
 },
 {
  "**********": "-109 <= matrix[i][j] <= 109"
 },
 {
  "**********": "***************868. Binary Gap"
 },
 null,
 {
  "**********": "***************Given a positive integer n, find and return the longest distance between any two adjacent1's in the binary representation of n. If there are no two adjacent 1's, return 0."
 },
 {
  "**********": "Two 1's are adjacent if there are only 0's separating them (possibly no 0's). The distance between two 1's is the absolute difference between their bit positions. For example, the two 1's in \"1001\" have a distance of 3."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 22Output: 2Explanation: 22 in binary is \"10110\".The first adjacent pair of 1's is \"10110\" with a distance of 2.The second adjacent pair of 1's is \"10110\" with a distance of 1.The answer is the largest of these two distances, which is 2.Note that \"10110\" is not a valid pair since there is a 1 separating the two 1's underlined.Example 2:"
 },
 {
  "**********": "Input: n = 8Output: 0Explanation: 8 in binary is \"1000\".There are not any adjacent pairs of 1's in the binary representation of 8, so we return 0.Example 3:"
 },
 {
  "**********": "Input: n = 5Output: 2Explanation: 5 in binary is \"101\"."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 109"
 },
 {
  "**********": "***********************872. Leaf-Similar Trees"
 },
 null,
 {
  "**********": "***********************Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence."
 },
 null,
 {
  "**********": "For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8)."
 },
 {
  "**********": "Two binary trees are considered leaf-similar if their leaf value sequence is the same."
 },
 {
  "**********": "Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]Output: trueExample 2:"
 },
 {
  "**********": "Input: root1 = [1,2,3], root2 = [1,3,2]Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in each tree will be in the range [1, 200]."
 },
 {
  "**********": "Both of the given trees will have values in the range [0, 200]."
 },
 {
  "**********": "******************************876. Middle of the Linked List"
 },
 null,
 {
  "**********": "******************************Given the head of a singly linked list, return the middle node of the linked list."
 },
 {
  "**********": "If there are two middle nodes, return the second middle node."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: head = [1,2,3,4,5]Output: [3,4,5]Explanation: The middle node of the list is node 3.Example 2:"
 },
 {
  "**********": "Input: head = [1,2,3,4,5,6]Output: [4,5,6]Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the list is in the range [1, 100]."
 },
 {
  "**********": "1 <= Node.val <= 100"
 },
 {
  "**********": "*********************************883. Projection Area of 3D Shapes"
 },
 null,
 {
  "**********": "*********************************You are given an n x ngrid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes."
 },
 {
  "**********": "Each value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j)."
 },
 {
  "**********": "We view the projection of these cubes onto the xy, yz, and zx planes."
 },
 {
  "**********": "A projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side."
 },
 {
  "**********": "Return the total area of all three projections."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: grid = [[1,2],[3,4]]Output: 17Explanation: Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane.Example 2:"
 },
 {
  "**********": "Input: grid = [[2]]Output: 5Example 3:"
 },
 {
  "**********": "Input: grid = [[1,0],[0,2]]Output: 8"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "n == grid.length == grid[i].length"
 },
 {
  "**********": "1 <= n <= 50"
 },
 {
  "**********": "0 <= grid[i][j] <= 50"
 },
 {
  "**********": "**************************************884. Uncommon Words from Two Sentences"
 },
 null,
 {
  "**********": "**************************************A sentence is a string of single-space separated words where each word consists only of lowercase letters."
 },
 {
  "**********": "A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence."
 },
 {
  "**********": "Given two sentencess1 and s2, return a list of all the uncommon words. You may return the answer in any order."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s1 = \"this apple is sweet\", s2 = \"this apple is sour\"Output: [\"sweet\",\"sour\"]Example 2:"
 },
 {
  "**********": "Input: s1 = \"apple apple\", s2 = \"banana\"Output: [\"banana\"]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s1.length, s2.length <= 200"
 },
 {
  "**********": "s1 and s2 consist of lowercase English letters and spaces."
 },
 {
  "**********": "s1 and s2 do not have leading or trailing spaces."
 },
 {
  "**********": "All the words in s1 and s2 are separated by a single space."
 },
 {
  "**********": "********************888. Fair Candy Swap"
 },
 null,
 {
  "**********": "********************Alice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has."
 },
 {
  "**********": "Since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have."
 },
 {
  "**********": "Return an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange. If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: aliceSizes = [1,1], bobSizes = [2,2]Output: [1,2]Example 2:"
 },
 {
  "**********": "Input: aliceSizes = [1,2], bobSizes = [2,3]Output: [1,2]Example 3:"
 },
 {
  "**********": "Input: aliceSizes = [2], bobSizes = [1,3]Output: [2,3]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= aliceSizes.length, bobSizes.length <= 104"
 },
 {
  "**********": "1 <= aliceSizes[i], bobSizes[j] <= 105"
 },
 {
  "**********": "Alice and Bob have a different total number of candies."
 },
 {
  "**********": "There will be at least one valid answer for the given input."
 },
 {
  "**********": "******************************892. Surface Area of 3D Shapes"
 },
 null,
 {
  "**********": "******************************You are given an n x ngrid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j)."
 },
 {
  "**********": "After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes."
 },
 {
  "**********": "Return the total surface area of the resulting shapes."
 },
 {
  "**********": "Note: The bottom face of each shape counts toward its surface area."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: grid = [[1,2],[3,4]]Output: 34Example 2:"
 },
 {
  "**********": "Input: grid = [[1,1,1],[1,0,1],[1,1,1]]Output: 32Example 3:"
 },
 {
  "**********": "Input: grid = [[2,2,2],[2,1,2],[2,2,2]]Output: 46"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "n == grid.length == grid[i].length"
 },
 {
  "**********": "1 <= n <= 50"
 },
 {
  "**********": "0 <= grid[i][j] <= 50"
 },
 {
  "**********": "********************896. Monotonic Array"
 },
 null,
 {
  "**********": "********************An array is monotonic if it is either monotone increasing or monotone decreasing."
 },
 {
  "**********": "An array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j]."
 },
 {
  "**********": "Given an integer array nums, return true if the given array is monotonic, or false otherwise."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,2,2,3]Output: trueExample 2:"
 },
 {
  "**********": "Input: nums = [6,5,4,4]Output: trueExample 3:"
 },
 {
  "**********": "Input: nums = [1,3,2]Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 105"
 },
 {
  "**********": "-105 <= nums[i] <= 105"
 },
 {
  "**********": "*********************************897. Increasing Order Search Tree"
 },
 null,
 {
  "**********": "*********************************Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]Example 2:"
 },
 {
  "**********": "Input: root = [5,1,7]Output: [1,null,5,null,7]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the given tree will be in the range [1, 100]."
 },
 {
  "**********": "0 <= Node.val <= 1000"
 },
 {
  "**********": "*************************905. Sort Array By Parity"
 },
 null,
 {
  "**********": "*************************Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers."
 },
 {
  "**********": "Return any array that satisfies this condition."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [3,1,2,4]Output: [2,4,3,1]Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.Example 2:"
 },
 {
  "**********": "Input: nums = [0]Output: [0]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 5000"
 },
 {
  "**********": "0 <= nums[i] <= 5000"
 },
 {
  "**********": "*********************908. Smallest Range I"
 },
 null,
 {
  "**********": "*********************You are given an integer array nums and an integer k."
 },
 {
  "**********": "In one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. You can apply this operation at most once for each index i."
 },
 {
  "**********": "The score of nums is the difference between the maximum and minimum elements in nums."
 },
 {
  "**********": "Return the minimum score of nums after applying the mentioned operation at most once for each index in it."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1], k = 0Output: 0Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.Example 2:"
 },
 {
  "**********": "Input: nums = [0,10], k = 2Output: 6Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.Example 3:"
 },
 {
  "**********": "Input: nums = [1,3,6], k = 3Output: 0Explanation: Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 104"
 },
 {
  "**********": "0 <= nums[i] <= 104"
 },
 {
  "**********": "0 <= k <= 104"
 },
 {
  "**********": "***********************************914. X of a Kind in a Deck of Cards"
 },
 null,
 {
  "**********": "***********************************In a deck of cards, each card has an integer written on it."
 },
 {
  "**********": "Return true if and only if you can choose X >= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:"
 },
 {
  "**********": "Each group has exactly X cards."
 },
 {
  "**********": "All the cards in each group have the same integer."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: deck = [1,2,3,4,4,3,2,1]Output: trueExplanation: Possible partition [1,1],[2,2],[3,3],[4,4].Example 2:"
 },
 {
  "**********": "Input: deck = [1,1,1,2,2,2,3,3]Output: falseExplanation: No possible partition."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= deck.length <= 104"
 },
 {
  "**********": "0 <= deck[i] < 104"
 },
 {
  "**********": "*************************917. Reverse Only Letters"
 },
 null,
 {
  "**********": "*************************Given a string s, reverse the string according to the following rules:"
 },
 {
  "**********": "All the characters that are not English letters remain in the same position."
 },
 {
  "**********": "All the English letters (lowercase or uppercase) should be reversed."
 },
 {
  "**********": "Return s after reversing it."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"ab-cd\"Output: \"dc-ba\"Example 2:"
 },
 {
  "**********": "Input: s = \"a-bC-dEf-ghIj\"Output: \"j-Ih-gfE-dCba\"Example 3:"
 },
 {
  "**********": "Input: s = \"Test1ng-Leet=code-Q!\"Output: \"Qedo1ct-eeLg=ntse-T!\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 100"
 },
 {
  "**********": "s consists of characters with ASCII values in the range [33, 122]."
 },
 {
  "**********": "s does not contain '\\\"' or '\\\\'."
 },
 {
  "**********": "****************************922. Sort Array By Parity II"
 },
 null,
 {
  "**********": "****************************Given an array of integers nums, half of the integers in nums are odd, and the other half are even."
 },
 {
  "**********": "Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even."
 },
 {
  "**********": "Return any answer array that satisfies this condition."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [4,2,5,7]Output: [4,5,2,7]Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.Example 2:"
 },
 {
  "**********": "Input: nums = [2,3]Output: [2,3]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "2 <= nums.length <= 2 * 104"
 },
 {
  "**********": "nums.length is even."
 },
 {
  "**********": "Half of the integers in nums are even."
 },
 {
  "**********": "0 <= nums[i] <= 1000"
 },
 null,
 {
  "**********": "Follow Up: Could you solve it in-place?"
 },
 {
  "**********": "**********************925. Long Pressed Name"
 },
 null,
 {
  "**********": "**********************Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times."
 },
 {
  "**********": "You examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: name = \"alex\", typed = \"aaleex\"Output: trueExplanation: 'a' and 'e' in 'alex' were long pressed.Example 2:"
 },
 {
  "**********": "Input: name = \"saeed\", typed = \"ssaaedd\"Output: falseExplanation: 'e' must have been pressed twice, but it was not in the typed output."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= name.length, typed.length <= 1000"
 },
 {
  "**********": "name and typed consist of only lowercase English letters."
 },
 {
  "**********": "***************************929. Unique Email Addresses"
 },
 null,
 {
  "**********": "***************************Every valid email consists of a local name and a domain name, separated by the '@' sign. Besides lowercase letters, the email may contain one or more '.' or '+'."
 },
 {
  "**********": "For example, in \"alice@leetcode.com\", \"alice\" is the local name, and \"leetcode.com\" is the domain name."
 },
 {
  "**********": "If you add periods '.' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names."
 },
 {
  "**********": "For example, \"alice.z@leetcode.com\" and \"alicez@leetcode.com\" forward to the same email address."
 },
 {
  "**********": "If you add a plus '+' in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names."
 },
 {
  "**********": "For example, \"m.y+name@email.com\" will be forwarded to \"my@email.com\"."
 },
 {
  "**********": "It is possible to use both of these rules at the same time."
 },
 {
  "**********": "Given an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]Output: 2Explanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails.Example 2:"
 },
 {
  "**********": "Input: emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"]Output: 3"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= emails.length <= 100"
 },
 {
  "**********": "1 <= emails[i].length <= 100"
 },
 {
  "**********": "emails[i] consist of lowercase English letters, '+', '.' and '@'."
 },
 {
  "**********": "Each emails[i] contains exactly one '@' character."
 },
 {
  "**********": "All local and domain names are non-empty."
 },
 {
  "**********": "Local names do not start with a '+' character."
 },
 {
  "**********": "Domain names end with the \".com\" suffix."
 },
 {
  "**********": "***************************933. Number of Recent Calls"
 },
 null,
 {
  "**********": "***************************You have a RecentCounter class which counts the number of recent requests within a certain time frame."
 },
 {
  "**********": "Implement the RecentCounter class:"
 },
 {
  "**********": "RecentCounter() Initializes the counter with zero recent requests."
 },
 {
  "**********": "int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t]."
 },
 {
  "**********": "It is guaranteed that every call to ping uses a strictly larger value of t than the previous call."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input[\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"][[], [1], [100], [3001], [3002]]Output[null, 1, 2, 3, 3]\nExplanationRecentCounter recentCounter = new RecentCounter();recentCounter.ping(1);     \/\/ requests = [1], range is [-2999,1], return 1recentCounter.ping(100);   \/\/ requests = [1, 100], range is [-2900,100], return 2recentCounter.ping(3001);  \/\/ requests = [1, 100, 3001], range is [1,3001], return 3recentCounter.ping(3002);  \/\/ requests = [1, 100, 3001, 3002], range is [2,3002], return 3"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= t <= 109"
 },
 {
  "**********": "Each test case will call ping with strictly increasing values of t."
 },
 {
  "**********": "At most 104 calls will be made to ping."
 },
 {
  "**********": "*********************938. Range Sum of BST"
 },
 null,
 {
  "**********": "*********************Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high]."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [10,5,15,3,7,null,18], low = 7, high = 15Output: 32Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.Example 2:"
 },
 {
  "**********": "Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10Output: 23Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [1, 2 * 104]."
 },
 {
  "**********": "1 <= Node.val <= 105"
 },
 {
  "**********": "1 <= low <= high <= 105"
 },
 {
  "**********": "All Node.val are unique."
 },
 {
  "**********": "*************************941. Valid Mountain Array"
 },
 null,
 {
  "**********": "*************************Given an array of integers arr, return true if and only if it is a valid mountain array."
 },
 {
  "**********": "Recall that arr is a mountain array if and only if:"
 },
 {
  "**********": "arr.length >= 3"
 },
 {
  "**********": "There exists some i with 0 < i < arr.length - 1 such that:"
 },
 {
  "**********": "arr[0] < arr[1] < ... < arr[i - 1] < arr[i] "
 },
 {
  "**********": "arr[i] > arr[i + 1] > ... > arr[arr.length - 1]"
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: arr = [2,1]Output: falseExample 2:"
 },
 {
  "**********": "Input: arr = [3,5,5]Output: falseExample 3:"
 },
 {
  "**********": "Input: arr = [0,3,2,1]Output: true"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= arr.length <= 104"
 },
 {
  "**********": "0 <= arr[i] <= 104"
 },
 {
  "**********": "********************942. DI String Match"
 },
 null,
 {
  "**********": "********************A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:"
 },
 {
  "**********": "s[i] == 'I' if perm[i] < perm[i + 1], and"
 },
 {
  "**********": "s[i] == 'D' if perm[i] > perm[i + 1]."
 },
 {
  "**********": "Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"IDID\"Output: [0,4,1,3,2]Example 2:"
 },
 {
  "**********": "Input: s = \"III\"Output: [0,1,2,3]Example 3:"
 },
 {
  "**********": "Input: s = \"DDI\"Output: [3,2,0,1]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 105"
 },
 {
  "**********": "s[i] is either 'I' or 'D'."
 },
 {
  "**********": "**********************************944. Delete Columns to Make Sorted"
 },
 null,
 {
  "**********": "**********************************You are given an array of n strings strs, all of the same length."
 },
 {
  "**********": "The strings can be arranged such that there is one on each line, making a grid. For example, strs = [\"abc\", \"bce\", \"cae\"] can be arranged as:"
 },
 {
  "**********": "abcbcecaeYou want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted while column 1 ('b', 'c', 'a') is not, so you would delete column 1."
 },
 {
  "**********": "Return the number of columns that you will delete."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: strs = [\"cba\",\"daf\",\"ghi\"]Output: 1Explanation: The grid looks as follows: cba daf ghiColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.Example 2:"
 },
 {
  "**********": "Input: strs = [\"a\",\"b\"]Output: 0Explanation: The grid looks as follows: a bColumn 0 is the only column and is sorted, so you will not delete any columns.Example 3:"
 },
 {
  "**********": "Input: strs = [\"zyx\",\"wvu\",\"tsr\"]Output: 3Explanation: The grid looks as follows: zyx wvu tsrAll 3 columns are not sorted, so you will delete all 3."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "n == strs.length"
 },
 {
  "**********": "1 <= n <= 100"
 },
 {
  "**********": "1 <= strs[i].length <= 1000"
 },
 {
  "**********": "strs[i] consists of lowercase English letters."
 },
 {
  "**********": "**********************************953. Verifying an Alien Dictionary"
 },
 null,
 {
  "**********": "**********************************In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters."
 },
 {
  "**********": "Given a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographically in this alien language."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"Output: trueExplanation: As 'h' comes before 'l' in this language, then the sequence is sorted.Example 2:"
 },
 null,
 {
  "**********": "Input: words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"Output: falseExplanation: The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" > \"app\", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (More info)."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= words.length <= 100"
 },
 {
  "**********": "1 <= words[i].length <= 20"
 },
 {
  "**********": "order.length == 26"
 },
 {
  "**********": "All characters in words[i] and order are English lowercase letters."
 },
 {
  "**********": "****************************************961. N-Repeated Element in Size 2N Array"
 },
 null,
 {
  "**********": "****************************************You are given an integer array nums with the following properties:"
 },
 {
  "**********": "nums.length == 2 * n."
 },
 {
  "**********": "nums contains n + 1unique elements."
 },
 {
  "**********": "Exactly one element of nums is repeated n times."
 },
 {
  "**********": "Return the element that is repeated n times."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,2,3,3]Output: 3Example 2:"
 },
 {
  "**********": "Input: nums = [2,1,2,5,3,2]Output: 2Example 3:"
 },
 {
  "**********": "Input: nums = [5,1,5,2,5,3,5,4]Output: 5"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "2 <= n <= 5000"
 },
 {
  "**********": "nums.length == 2 * n"
 },
 {
  "**********": "0 <= nums[i] <= 104"
 },
 {
  "**********": "nums contains n + 1unique elements and one of them is repeated exactly n times."
 },
 {
  "**********": "**************************965. Univalued Binary Tree"
 },
 null,
 {
  "**********": "**************************A binary tree is uni-valued if every node in the tree has the same value."
 },
 {
  "**********": "Given the root of a binary tree, return true if the given tree is uni-valued, or false otherwise."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [1,1,1,1,1,null,1]Output: trueExample 2:"
 },
 {
  "**********": "Input: root = [2,2,2,5,2]Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [1, 100]."
 },
 {
  "**********": "0 <= Node.val < 100"
 },
 {
  "**********": "*******************************976. Largest Perimeter Triangle"
 },
 null,
 {
  "**********": "*******************************Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [2,1,2]Output: 5Example 2:"
 },
 {
  "**********": "Input: nums = [1,2,1]Output: 0"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "3 <= nums.length <= 104"
 },
 {
  "**********": "1 <= nums[i] <= 106"
 },
 {
  "**********": "******************************977. Squares of a Sorted Array"
 },
 null,
 {
  "**********": "******************************Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [-4,-1,0,3,10]Output: [0,1,9,16,100]Explanation: After squaring, the array becomes [16,1,0,9,100].After sorting, it becomes [0,1,9,16,100].Example 2:"
 },
 {
  "**********": "Input: nums = [-7,-3,2,3,11]Output: [4,9,9,49,121]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 104"
 },
 {
  "**********": "-104 <= nums[i] <= 104"
 },
 {
  "**********": "nums is sorted in non-decreasing order."
 },
 {
  "**********": "Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?"
 },
 {
  "**********": "*********************************989. Add to Array-Form of Integer"
 },
 null,
 {
  "**********": "*********************************The array-form of an integer num is an array representing its digits in left to right order."
 },
 {
  "**********": "For example, for num = 1321, the array form is [1,3,2,1]."
 },
 {
  "**********": "Given num, the array-form of an integer, and an integer k, return the array-form of the integernum + k."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: num = [1,2,0,0], k = 34Output: [1,2,3,4]Explanation: 1200 + 34 = 1234Example 2:"
 },
 {
  "**********": "Input: num = [2,7,4], k = 181Output: [4,5,5]Explanation: 274 + 181 = 455Example 3:"
 },
 {
  "**********": "Input: num = [2,1,5], k = 806Output: [1,0,2,1]Explanation: 215 + 806 = 1021"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= num.length <= 104"
 },
 {
  "**********": "0 <= num[i] <= 9"
 },
 {
  "**********": "num does not contain any leading zeros except for the zero itself."
 },
 {
  "**********": "1 <= k <= 104"
 },
 {
  "**********": "***************************993. Cousins in Binary Tree"
 },
 null,
 {
  "**********": "***************************Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return trueif the nodes corresponding to the values x and y in the tree are cousins, or false otherwise."
 },
 {
  "**********": "Two nodes of a binary tree are cousins if they have the same depth with different parents."
 },
 {
  "**********": "Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [1,2,3,4], x = 4, y = 3Output: falseExample 2:"
 },
 {
  "**********": "Input: root = [1,2,3,null,4,null,5], x = 5, y = 4Output: trueExample 3:"
 },
 {
  "**********": "Input: root = [1,2,3,null,4], x = 2, y = 3Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [2, 100]."
 },
 {
  "**********": "1 <= Node.val <= 100"
 },
 {
  "**********": "Each node has a unique value."
 },
 {
  "**********": "x != y"
 },
 {
  "**********": "x and y are exist in the tree."
 },
 {
  "**********": "************************997. Find the Town Judge"
 },
 null,
 {
  "**********": "************************In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge."
 },
 {
  "**********": "If the town judge exists, then:"
 },
 {
  "**********": "1. The town judge trusts nobody."
 },
 {
  "**********": "2. Everybody (except for the town judge) trusts the town judge."
 },
 {
  "**********": "3. There is exactly one person that satisfies properties 1 and 2."
 },
 {
  "**********": "You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi."
 },
 {
  "**********": "Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 2, trust = [[1,2]]Output: 2Example 2:"
 },
 {
  "**********": "Input: n = 3, trust = [[1,3],[2,3]]Output: 3Example 3:"
 },
 {
  "**********": "Input: n = 3, trust = [[1,3],[2,3],[3,1]]Output: -1"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 1000"
 },
 {
  "**********": "0 <= trust.length <= 104"
 },
 {
  "**********": "trust[i].length == 2"
 },
 {
  "**********": "All the pairs of trust are unique."
 },
 {
  "**********": "ai != bi"
 },
 {
  "**********": "1 <= ai, bi <= n"
 },
 {
  "**********": "********************************999. Available Captures for Rook"
 },
 null,
 {
  "**********": "********************************On an 8 x 8 chessboard, there is exactly one white rook 'R' and some number of white bishops 'B', black pawns 'p', and empty squares '.'."
 },
 {
  "**********": "When the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn. The number of available captures for the white rook is the number of pawns that the rook is attacking."
 },
 {
  "**********": "Return the number of available captures for the white rook."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]Output: 3Explanation: In this example, the rook is attacking all the pawns.Example 2:"
 },
 {
  "**********": "Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]Output: 0Explanation: The bishops are blocking the rook from attacking any of the pawns.Example 3:"
 },
 {
  "**********": "Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]Output: 3Explanation: The rook is attacking the pawns at positions b5, d6, and f5."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "board.length == 8"
 },
 {
  "**********": "board[i].length == 8"
 },
 {
  "**********": "board[i][j] is either 'R', '.', 'B', or 'p'"
 },
 {
  "**********": "There is exactly one cell with board[i][j] == 'R'"
 },
 {
  "**********": "****************************1002. Find Common Characters"
 },
 null,
 {
  "**********": "****************************Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: words = [\"bella\",\"label\",\"roller\"]Output: [\"e\",\"l\",\"l\"]Example 2:"
 },
 {
  "**********": "Input: words = [\"cool\",\"lock\",\"cook\"]Output: [\"c\",\"o\"]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= words.length <= 100"
 },
 {
  "**********": "1 <= words[i].length <= 100"
 },
 {
  "**********": "words[i] consists of lowercase English letters."
 },
 {
  "**********": "*********************************************1005. Maximize Sum Of Array After K Negations"
 },
 null,
 {
  "**********": "*********************************************Given an integer array nums and an integer k, modify the array in the following way:"
 },
 {
  "**********": "choose an index i and replace nums[i] with -nums[i]."
 },
 {
  "**********": "You should apply this process exactly k times. You may choose the same index i multiple times."
 },
 {
  "**********": "Return the largest possible sum of the array after modifying it in this way."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [4,2,3], k = 1Output: 5Explanation: Choose index 1 and nums becomes [4,-2,3].Example 2:"
 },
 {
  "**********": "Input: nums = [3,-1,0,2], k = 3Output: 6Explanation: Choose indices (1, 2, 2) and nums becomes [3,1,0,2].Example 3:"
 },
 {
  "**********": "Input: nums = [2,-3,-1,5,-4], k = 2Output: 13Explanation: Choose indices (1, 4) and nums becomes [2,3,-1,5,4]."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 104"
 },
 {
  "**********": "-100 <= nums[i] <= 100"
 },
 {
  "**********": "1 <= k <= 104"
 },
 {
  "**********": "***********************************1009. Complement of Base 10 Integer"
 },
 null,
 {
  "**********": "***********************************The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation."
 },
 {
  "**********": "For example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2."
 },
 {
  "**********": "Given an integer n, return its complement."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 5Output: 2Explanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.Example 2:"
 },
 {
  "**********": "Input: n = 7Output: 0Explanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.Example 3:"
 },
 {
  "**********": "Input: n = 10Output: 5Explanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= n < 109"
 },
 null,
 {
  "**********": "Note: This question is the same as 476: https:\/\/leetcode.com\/problems\/number-complement\/"
 },
 {
  "**********": "*****************************************************1013. Partition Array Into Three Parts With Equal Sum"
 },
 null,
 {
  "**********": "*****************************************************Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums."
 },
 {
  "**********": "Formally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])"
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1]Output: trueExplanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1Example 2:"
 },
 {
  "**********": "Input: arr = [0,2,1,-6,6,7,9,-1,2,0,1]Output: falseExample 3:"
 },
 {
  "**********": "Input: arr = [3,3,6,5,-2,2,5,1,-9,4]Output: trueExplanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "3 <= arr.length <= 5 * 104"
 },
 {
  "**********": "-104 <= arr[i] <= 104"
 },
 {
  "**********": "**********************************1018. Binary Prefix Divisible By 5"
 },
 null,
 {
  "**********": "**********************************You are given a binary array nums (0-indexed)."
 },
 {
  "**********": "We define xi as the number whose binary representation is the subarray nums[0..i] (from most-significant-bit to least-significant-bit)."
 },
 {
  "**********": "For example, if nums = [1,0,1], then x0 = 1, x1 = 2, and x2 = 5."
 },
 {
  "**********": "Return an array of booleans answer where answer[i] is true if xi is divisible by 5."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [0,1,1]Output: [true,false,false]Explanation: The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.Only the first number is divisible by 5, so answer[0] is true.Example 2:"
 },
 {
  "**********": "Input: nums = [1,1,1]Output: [false,false,false]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 105"
 },
 {
  "**********": "nums[i] is either 0 or 1."
 },
 {
  "**********": "**********************************1021. Remove Outermost Parentheses"
 },
 null,
 {
  "**********": "**********************************A valid parentheses string is either empty \"\", \"(\" + A + \")\", or A + B, where A and B are valid parentheses strings, and + represents string concatenation."
 },
 {
  "**********": "For example, \"\", \"()\", \"(())()\", and \"(()(()))\" are all valid parentheses strings."
 },
 {
  "**********": "A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings."
 },
 {
  "**********": "Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings."
 },
 {
  "**********": "Return safter removing the outermost parentheses of every primitive string in the primitive decomposition of s."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"(()())(())\"Output: \"()()()\"Explanation: The input string is \"(()())(())\", with primitive decomposition \"(()())\" + \"(())\".After removing outer parentheses of each part, this is \"()()\" + \"()\" = \"()()()\".Example 2:"
 },
 {
  "**********": "Input: s = \"(()())(())(()(()))\"Output: \"()()()()(())\"Explanation: The input string is \"(()())(())(()(()))\", with primitive decomposition \"(()())\" + \"(())\" + \"(()(()))\".After removing outer parentheses of each part, this is \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\".Example 3:"
 },
 {
  "**********": "Input: s = \"()()\"Output: \"\"Explanation: The input string is \"()()\", with primitive decomposition \"()\" + \"()\".After removing outer parentheses of each part, this is \"\" + \"\" = \"\"."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 105"
 },
 {
  "**********": "s[i] is either '(' or ')'."
 },
 {
  "**********": "s is a valid parentheses string."
 },
 {
  "**********": "****************************************1022. Sum of Root To Leaf Binary Numbers"
 },
 null,
 {
  "**********": "****************************************You are given the root of a binary tree where each node has a value 0 or 1. Each root-to-leaf path represents a binary number starting with the most significant bit."
 },
 {
  "**********": "For example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13."
 },
 {
  "**********": "For all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return the sum of these numbers."
 },
 {
  "**********": "The test cases are generated so that the answer fits in a 32-bits integer."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: root = [1,0,1,0,1,0,1]Output: 22Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22Example 2:"
 },
 {
  "**********": "Input: root = [0]Output: 0"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The number of nodes in the tree is in the range [1, 1000]."
 },
 {
  "**********": "Node.val is 0 or 1."
 },
 {
  "**********": "******************1025. Divisor Game"
 },
 null,
 {
  "**********": "******************Alice and Bob take turns playing a game, with Alice starting first."
 },
 {
  "**********": "Initially, there is a number n on the chalkboard. On each player's turn, that player makes a move consisting of:"
 },
 {
  "**********": "Choosing any x with 0 < x < n and n % x == 0."
 },
 {
  "**********": "Replacing the number n on the chalkboard with n - x."
 },
 {
  "**********": "Also, if a player cannot make a move, they lose the game."
 },
 {
  "**********": "Return trueif and only if Alice wins the game, assuming both players play optimally."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 2Output: trueExplanation: Alice chooses 1, and Bob has no more moves.Example 2:"
 },
 {
  "**********": "Input: n = 3Output: falseExplanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 1000"
 },
 {
  "**********": "************************************1030. Matrix Cells in Distance Order"
 },
 null,
 {
  "**********": "************************************You are given four integers row, cols, rCenter, and cCenter. There is a rows x cols matrix and you are on the cell with the coordinates (rCenter, cCenter)."
 },
 {
  "**********": "Return the coordinates of all cells in the matrix, sorted by their distance from (rCenter, cCenter) from the smallest distance to the largest distance. You may return the answer in any order that satisfies this condition."
 },
 {
  "**********": "The distance between two cells (r1, c1) and (r2, c2) is |r1 - r2| + |c1 - c2|."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: rows = 1, cols = 2, rCenter = 0, cCenter = 0Output: [[0,0],[0,1]]Explanation: The distances from (0, 0) to other cells are: [0,1]Example 2:"
 },
 {
  "**********": "Input: rows = 2, cols = 2, rCenter = 0, cCenter = 1Output: [[0,1],[0,0],[1,1],[1,0]]Explanation: The distances from (0, 1) to other cells are: [0,1,1,2]The answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.Example 3:"
 },
 {
  "**********": "Input: rows = 2, cols = 3, rCenter = 1, cCenter = 2Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]Explanation: The distances from (1, 2) to other cells are: [0,1,1,2,2,3]There are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= rows, cols <= 100"
 },
 {
  "**********": "0 <= rCenter < rows"
 },
 {
  "**********": "0 <= cCenter < cols"
 },
 {
  "**********": "*********************1037. Valid Boomerang"
 },
 null,
 {
  "**********": "*********************Given an array points where points[i] = [xi, yi] represents a point on the X-Y plane, return trueif these points are a boomerang."
 },
 {
  "**********": "A boomerang is a set of three points that are all distinct and not in a straight line."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: points = [[1,1],[2,3],[3,2]]Output: trueExample 2:"
 },
 {
  "**********": "Input: points = [[1,1],[2,2],[3,3]]Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "points.length == 3"
 },
 {
  "**********": "points[i].length == 2"
 },
 {
  "**********": "0 <= xi, yi <= 100"
 },
 {
  "**********": "***********************1046. Last Stone Weight"
 },
 null,
 {
  "**********": "***********************You are given an array of integers stones where stones[i] is the weight of the ith stone."
 },
 {
  "**********": "We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:"
 },
 {
  "**********": "If x == y, both stones are destroyed, and"
 },
 {
  "**********": "If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x."
 },
 {
  "**********": "At the end of the game, there is at most one stone left."
 },
 {
  "**********": "Return the weight of the last remaining stone. If there are no stones left, return 0."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: stones = [2,7,4,1,8,1]Output: 1Explanation: We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.Example 2:"
 },
 {
  "**********": "Input: stones = [1]Output: 1"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= stones.length <= 30"
 },
 {
  "**********": "1 <= stones[i] <= 1000"
 },
 {
  "**********": "**********************************************1047. Remove All Adjacent Duplicates In String"
 },
 null,
 {
  "**********": "**********************************************You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them."
 },
 {
  "**********": "We repeatedly make duplicate removals on s until we no longer can."
 },
 {
  "**********": "Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"abbaca\"Output: \"ca\"Explanation: For example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\".Example 2:"
 },
 {
  "**********": "Input: s = \"azxxzy\"Output: \"ay\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 105"
 },
 {
  "**********": "s consists of lowercase English letters."
 },
 {
  "**********": "********************1051. Height Checker"
 },
 null,
 {
  "**********": "********************A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line."
 },
 {
  "**********": "You are given an integer array heights representing the current order that the students are standing in. Each heights[i] is the height of the ith student in line (0-indexed)."
 },
 {
  "**********": "Return the number of indices where heights[i] != expected[i]."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: heights = [1,1,4,2,1,3]Output: 3Explanation: heights:  [1,1,4,2,1,3]expected: [1,1,1,2,3,4]Indices 2, 4, and 5 do not match.Example 2:"
 },
 {
  "**********": "Input: heights = [5,1,2,3,4]Output: 5Explanation:heights:  [5,1,2,3,4]expected: [1,2,3,4,5]All indices do not match.Example 3:"
 },
 {
  "**********": "Input: heights = [1,2,3,4,5]Output: 0Explanation:heights:  [1,2,3,4,5]expected: [1,2,3,4,5]All indices match."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= heights.length <= 100"
 },
 {
  "**********": "1 <= heights[i] <= 100"
 },
 {
  "**********": "****************************************1071. Greatest Common Divisor of Strings"
 },
 null,
 {
  "**********": "****************************************For two strings s and t, we say \"t divides s\" if and only if s = t + ... + t (i.e., t is concatenated with itself one or more times)."
 },
 {
  "**********": "Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: str1 = \"ABCABC\", str2 = \"ABC\"Output: \"ABC\"Example 2:"
 },
 {
  "**********": "Input: str1 = \"ABABAB\", str2 = \"ABAB\"Output: \"AB\"Example 3:"
 },
 {
  "**********": "Input: str1 = \"LEET\", str2 = \"CODE\"Output: \"\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= str1.length, str2.length <= 1000"
 },
 {
  "**********": "str1 and str2 consist of English uppercase letters."
 },
 {
  "**********": "******************************1078. Occurrences After Bigram"
 },
 null,
 {
  "**********": "******************************Given two strings first and second, consider occurrences in some text of the form \"first second third\", where second comes immediately after first, and third comes immediately after second."
 },
 {
  "**********": "Return an array of all the wordsthirdfor each occurrence of\"first second third\"."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"Output: [\"girl\",\"student\"]Example 2:"
 },
 {
  "**********": "Input: text = \"we will we will rock you\", first = \"we\", second = \"will\"Output: [\"we\",\"rock\"]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= text.length <= 1000"
 },
 {
  "**********": "text consists of lowercase English letters and spaces."
 },
 {
  "**********": "All the words in text a separated by a single space."
 },
 {
  "**********": "1 <= first.length, second.length <= 10"
 },
 {
  "**********": "first and second consist of lowercase English letters."
 },
 {
  "**********": "*********************1089. Duplicate Zeros"
 },
 null,
 {
  "**********": "*********************Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right."
 },
 {
  "**********": "Note that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: arr = [1,0,2,3,0,4,5,0]Output: [1,0,0,2,3,0,0,4]Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]Example 2:"
 },
 {
  "**********": "Input: arr = [1,2,3]Output: [1,2,3]Explanation: After calling your function, the input array is modified to: [1,2,3]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= arr.length <= 104"
 },
 {
  "**********": "0 <= arr[i] <= 9"
 },
 {
  "**********": "**********************************1103. Distribute Candies to People"
 },
 null,
 {
  "**********": "**********************************We distribute some number of candies, to a row of n = num_people people in the following way:"
 },
 {
  "**********": "We then give 1 candy to the first person, 2 candies to the second person, and so on until we give n candies to the last person."
 },
 {
  "**********": "Then, we go back to the start of the row, giving n + 1 candies to the first person, n + 2 candies to the second person, and so on until we give 2 * n candies to the last person."
 },
 {
  "**********": "This process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.  The last person will receive all of our remaining candies (not necessarily one more than the previous gift)."
 },
 {
  "**********": "Return an array (of length num_people and sum candies) that represents the final distribution of candies."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: candies = 7, num_people = 4Output: [1,2,3,1]Explanation:On the first turn, ans[0] += 1, and the array is [1,0,0,0].On the second turn, ans[1] += 2, and the array is [1,2,0,0].On the third turn, ans[2] += 3, and the array is [1,2,3,0].On the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1].Example 2:"
 },
 {
  "**********": "Input: candies = 10, num_people = 3Output: [5,2,3]Explanation: On the first turn, ans[0] += 1, and the array is [1,0,0].On the second turn, ans[1] += 2, and the array is [1,2,0].On the third turn, ans[2] += 3, and the array is [1,2,3].On the fourth turn, ans[0] += 4, and the final array is [5,2,3]."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= candies <= 10^9"
 },
 {
  "**********": "1 <= num_people <= 1000"
 },
 {
  "**********": "*****************************1108. Defanging an IP Address"
 },
 null,
 {
  "**********": "*****************************Given a valid (IPv4) IP address, return a defanged version of that IP address."
 },
 {
  "**********": "A defanged IP address replaces every period \".\" with \"[.]\"."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: address = \"1.1.1.1\"Output: \"1[.]1[.]1[.]1\"Example 2:"
 },
 {
  "**********": "Input: address = \"255.100.50.0\"Output: \"255[.]100[.]50[.]0\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The given address is a valid IPv4 address."
 },
 {
  "**********": "*************************1122. Relative Sort Array"
 },
 null,
 {
  "**********": "*************************Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1."
 },
 {
  "**********": "Sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2. Elements that do not appear in arr2 should be placed at the end of arr1 in ascending order."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]Output: [2,2,2,1,4,3,3,9,6,7,19]Example 2:"
 },
 {
  "**********": "Input: arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]Output: [22,28,8,6,17,44]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= arr1.length, arr2.length <= 1000"
 },
 {
  "**********": "0 <= arr1[i], arr2[i] <= 1000"
 },
 {
  "**********": "All the elements of arr2 are distinct."
 },
 {
  "**********": "Each arr2[i] is in arr1."
 },
 {
  "**********": "***************************************1128. Number of Equivalent Domino Pairs"
 },
 null,
 {
  "**********": "***************************************Given a list of dominoes, dominoes[i] = [a, b] is equivalent todominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino."
 },
 {
  "**********": "Return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent todominoes[j]."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]Output: 1Example 2:"
 },
 {
  "**********": "Input: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]Output: 3"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= dominoes.length <= 4 * 104"
 },
 {
  "**********": "dominoes[i].length == 2"
 },
 {
  "**********": "1 <= dominoes[i][j] <= 9"
 },
 {
  "**********": "****************************1137. N-th Tribonacci Number"
 },
 null,
 {
  "**********": "****************************The Tribonacci sequence Tn is defined as follows: "
 },
 {
  "**********": "T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0."
 },
 {
  "**********": "Given n, return the value of Tn."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 4Output: 4Explanation:T_3 = 0 + 1 + 1 = 2T_4 = 1 + 1 + 2 = 4Example 2:"
 },
 {
  "**********": "Input: n = 25Output: 1389537"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= n <= 37"
 },
 {
  "**********": "The answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1."
 },
 {
  "**********": "*********************1154. Day of the Year"
 },
 null,
 {
  "**********": "*********************Given a string date representing a Gregorian calendar date formatted as YYYY-MM-DD, return the day number of the year."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: date = \"2019-01-09\"Output: 9Explanation: Given date is the 9th day of the year in 2019.Example 2:"
 },
 {
  "**********": "Input: date = \"2019-02-10\"Output: 41"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "date.length == 10"
 },
 {
  "**********": "date[4] == date[7] == '-', and all other date[i]'s are digits"
 },
 {
  "**********": "date represents a calendar date between Jan 1st, 1900 and Dec 31th, 2019."
 },
 {
  "**********": "*************************************************1160. Find Words That Can Be Formed by Characters"
 },
 null,
 {
  "**********": "*************************************************You are given an array of strings words and a string chars."
 },
 {
  "**********": "A string is good if it can be formed by characters from chars (each character can only be used once)."
 },
 {
  "**********": "Return the sum of lengths of all good strings in words."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"Output: 6Explanation: The strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6.Example 2:"
 },
 {
  "**********": "Input: words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"Output: 10Explanation: The strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= words.length <= 1000"
 },
 {
  "**********": "1 <= words[i].length, chars.length <= 100"
 },
 {
  "**********": "words[i] and chars consist of lowercase English letters."
 },
 {
  "**********": "************************1175. Prime Arrangements"
 },
 null,
 {
  "**********": "************************Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)"
 },
 {
  "**********": "(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)"
 },
 {
  "**********": "Since the answer may be large, return the answer modulo 10^9 + 7."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 5Output: 12Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.Example 2:"
 },
 {
  "**********": "Input: n = 100Output: 682289015"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 100"
 },
 {
  "**********": "********************************1184. Distance Between Bus Stops"
 },
 null,
 {
  "**********": "********************************A bus has n stops numbered from 0 to n - 1 that form a circle. We know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number i and (i + 1) % n."
 },
 {
  "**********": "The bus goes along both directions i.e. clockwise and counterclockwise."
 },
 {
  "**********": "Return the shortest distance between the given start and destination stops."
 },
 null,
 {
  "**********": "Example 1:"
 },
 null,
 {
  "**********": "Input: distance = [1,2,3,4], start = 0, destination = 1Output: 1Explanation: Distance between 0 and 1 is 1 or 9, minimum is 1."
 },
 {
  "**********": "Example 2:"
 },
 null,
 {
  "**********": "Input: distance = [1,2,3,4], start = 0, destination = 2Output: 3Explanation: Distance between 0 and 2 is 3 or 7, minimum is 3."
 },
 {
  "**********": "Example 3:"
 },
 null,
 {
  "**********": "Input: distance = [1,2,3,4], start = 0, destination = 3Output: 4Explanation: Distance between 0 and 3 is 6 or 4, minimum is 4."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 10^4"
 },
 {
  "**********": "distance.length == n"
 },
 {
  "**********": "0 <= start, destination < n"
 },
 {
  "**********": "0 <= distance[i] <= 10^4"
 },
 {
  "**********": "*********************1185. Day of the Week"
 },
 null,
 {
  "**********": "*********************Given a date, return the corresponding day of the week for that date."
 },
 {
  "**********": "The input is given as three integers representing the day, month and year respectively."
 },
 {
  "**********": "Return the answer as one of the following values {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: day = 31, month = 8, year = 2019Output: \"Saturday\"Example 2:"
 },
 {
  "**********": "Input: day = 18, month = 7, year = 1999Output: \"Sunday\"Example 3:"
 },
 {
  "**********": "Input: day = 15, month = 8, year = 1993Output: \"Sunday\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The given dates are valid dates between the years 1971 and 2100."
 },
 {
  "**********": "********************************1189. Maximum Number of Balloons"
 },
 null,
 {
  "**********": "********************************Given a string text, you want to use the characters of text to form as many instances of the word \"balloon\" as possible."
 },
 {
  "**********": "You can use each character in textat most once. Return the maximum number of instances that can be formed."
 },
 null,
 {
  "**********": "Example 1:"
 },
 null,
 {
  "**********": "Input: text = \"nlaebolko\"Output: 1Example 2:"
 },
 null,
 {
  "**********": "Input: text = \"loonbalxballpoon\"Output: 2Example 3:"
 },
 {
  "**********": "Input: text = \"leetcode\"Output: 0"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= text.length <= 104"
 },
 {
  "**********": "text consists of lower case English letters only."
 },
 {
  "**********": "*********************************1200. Minimum Absolute Difference"
 },
 null,
 {
  "**********": "*********************************Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements."
 },
 {
  "**********": "Return a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows"
 },
 {
  "**********": "a, b are from arr"
 },
 {
  "**********": "a < b"
 },
 {
  "**********": "b - a equals to the minimum absolute difference of any two elements in arr"
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: arr = [4,2,1,3]Output: [[1,2],[2,3],[3,4]]Explanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.Example 2:"
 },
 {
  "**********": "Input: arr = [1,3,6,10,15]Output: [[1,3]]Example 3:"
 },
 {
  "**********": "Input: arr = [3,8,-10,23,19,-4,-14,27]Output: [[-14,-10],[19,23],[23,27]]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "2 <= arr.length <= 105"
 },
 {
  "**********": "-106 <= arr[i] <= 106"
 },
 {
  "**********": "**********************************1207. Unique Number of Occurrences"
 },
 null,
 {
  "**********": "**********************************Given an array of integers arr, return true if the number of occurrences of each value in the array is unique, or false otherwise."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: arr = [1,2,2,1,1,3]Output: trueExplanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.Example 2:"
 },
 {
  "**********": "Input: arr = [1,2]Output: falseExample 3:"
 },
 {
  "**********": "Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]Output: true"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= arr.length <= 1000"
 },
 {
  "**********": "-1000 <= arr[i] <= 1000"
 },
 {
  "**********": "*****************************************************1217. Minimum Cost to Move Chips to The Same Position"
 },
 null,
 {
  "**********": "*****************************************************We have n chips, where the position of the ith chip is position[i]."
 },
 {
  "**********": "We need to move all the chips to the same position. In one step, we can change the position of the ith chip from position[i] to:"
 },
 {
  "**********": "position[i] + 2 or position[i] - 2 with cost = 0."
 },
 {
  "**********": "position[i] + 1 or position[i] - 1 with cost = 1."
 },
 {
  "**********": "Return the minimum cost needed to move all the chips to the same position."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: position = [1,2,3]Output: 1Explanation: First step: Move the chip at position 3 to position 1 with cost = 0.Second step: Move the chip at position 2 to position 1 with cost = 1.Total cost is 1.Example 2:"
 },
 {
  "**********": "Input: position = [2,2,2,3,3]Output: 2Explanation: We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.Example 3:"
 },
 {
  "**********": "Input: position = [1,1000000000]Output: 1"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= position.length <= 100"
 },
 {
  "**********": "1 <= position[i] <= 10^9"
 },
 {
  "**********": "****************************************1221. Split a String in Balanced Strings"
 },
 null,
 {
  "**********": "****************************************Balanced strings are those that have an equal quantity of 'L' and 'R' characters."
 },
 {
  "**********": "Given a balanced string s, split it into some number of substrings such that:"
 },
 {
  "**********": "Each substring is balanced."
 },
 {
  "**********": "Return the maximum number of balanced strings you can obtain."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"RLRRLLRLRL\"Output: 4Explanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'.Example 2:"
 },
 {
  "**********": "Input: s = \"RLRRRLLRLL\"Output: 2Explanation: s can be split into \"RL\", \"RRRLLRLL\", each substring contains same number of 'L' and 'R'.Note that s cannot be split into \"RL\", \"RR\", \"RL\", \"LR\", \"LL\", because the 2nd and 5th substrings are not balanced.Example 3:"
 },
 {
  "**********": "Input: s = \"LLLLRRRR\"Output: 1Explanation: s can be split into \"LLLLRRRR\"."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "2 <= s.length <= 1000"
 },
 {
  "**********": "s[i] is either 'L' or 'R'."
 },
 {
  "**********": "s is a balanced string."
 },
 {
  "**********": "************************************1232. Check If It Is a Straight Line"
 },
 null,
 {
  "**********": "************************************You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane."
 },
 null,
 null,
 {
  "**********": "Example 1:"
 },
 null,
 {
  "**********": "Input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]Output: trueExample 2:"
 },
 null,
 {
  "**********": "Input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]Output: false"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "2 <= coordinates.length <= 1000"
 },
 {
  "**********": "coordinates[i].length == 2"
 },
 {
  "**********": "-10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4"
 },
 {
  "**********": "coordinates contains no duplicate point."
 },
 {
  "**********": "***************************************1252. Cells with Odd Values in a Matrix"
 },
 null,
 {
  "**********": "***************************************There is an m x n matrix that is initialized to all 0's. There is also a 2D array indices where each indices[i] = [ri, ci] represents a 0-indexed location to perform some increment operations on the matrix."
 },
 {
  "**********": "For each location indices[i], do both of the following:"
 },
 {
  "**********": "1. Increment all the cells on row ri."
 },
 {
  "**********": "2. Increment all the cells on column ci."
 },
 {
  "**********": "Given m, n, and indices, return the number of odd-valued cells in the matrix after applying the increment to all locations in indices."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: m = 2, n = 3, indices = [[0,1],[1,1]]Output: 6Explanation: Initial matrix = [[0,0,0],[0,0,0]].After applying first increment it becomes [[1,2,1],[0,1,0]].The final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers.Example 2:"
 },
 {
  "**********": "Input: m = 2, n = 2, indices = [[1,1],[0,0]]Output: 0Explanation: Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= m, n <= 50"
 },
 {
  "**********": "1 <= indices.length <= 100"
 },
 {
  "**********": "0 <= ri < m"
 },
 {
  "**********": "0 <= ci < n"
 },
 null,
 {
  "**********": "Follow up: Could you solve this in O(n + m + indices.length) time with only O(n + m) extra space?"
 },
 {
  "**********": "*******************1260. Shift 2D Grid"
 },
 null,
 {
  "**********": "*******************Given a 2D grid of size m x n and an integer k. You need to shift the gridk times."
 },
 {
  "**********": "In one shift operation:"
 },
 {
  "**********": "Element at grid[i][j] moves to grid[i][j + 1]."
 },
 {
  "**********": "Element at grid[i][n - 1] moves to grid[i + 1][0]."
 },
 {
  "**********": "Element at grid[m - 1][n - 1] moves to grid[0][0]."
 },
 {
  "**********": "Return the 2D grid after applying shift operation k times."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input:grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1Output: [[9,1,2],[3,4,5],[6,7,8]]Example 2:"
 },
 {
  "**********": "Input:grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]Example 3:"
 },
 {
  "**********": "Input:grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9Output: [[1,2,3],[4,5,6],[7,8,9]]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "m == grid.length"
 },
 {
  "**********": "n == grid[i].length"
 },
 {
  "**********": "1 <= m <= 50"
 },
 {
  "**********": "1 <= n <= 50"
 },
 {
  "**********": "-1000 <= grid[i][j] <= 1000"
 },
 {
  "**********": "0 <= k <= 100"
 },
 {
  "**********": "**************************************1266. Minimum Time Visiting All Points"
 },
 null,
 {
  "**********": "**************************************On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points."
 },
 {
  "**********": "You can move according to these rules:"
 },
 {
  "**********": "In 1 second, you can either:"
 },
 {
  "**********": "move vertically by one unit,"
 },
 {
  "**********": "move horizontally by one unit, or"
 },
 {
  "**********": "move diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second)."
 },
 {
  "**********": "You have to visit the points in the same order as they appear in the array."
 },
 {
  "**********": "You are allowed to pass through points that appear later in the order, but these do not count as visits."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: points = [[1,1],[3,4],[-1,0]]Output: 7Explanation: One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]   Time from [1,1] to [3,4] = 3 seconds Time from [3,4] to [-1,0] = 4 secondsTotal time = 7 secondsExample 2:"
 },
 {
  "**********": "Input: points = [[3,2],[-2,2]]Output: 5"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "points.length == n"
 },
 {
  "**********": "1 <= n <= 100"
 },
 {
  "**********": "points[i].length == 2"
 },
 {
  "**********": "-1000 <= points[i][0], points[i][1] <= 1000"
 },
 {
  "**********": "***************************************1275. Find Winner on a Tic Tac Toe Game"
 },
 null,
 {
  "**********": "***************************************Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:"
 },
 {
  "**********": "Players take turns placing characters into empty squares ' '."
 },
 {
  "**********": "The first player A always places 'X' characters, while the second player B always places 'O' characters."
 },
 {
  "**********": "X' and 'O' characters are always placed into empty squares, never on filled ones."
 },
 {
  "**********": "The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal."
 },
 {
  "**********": "The game also ends if all squares are non-empty."
 },
 {
  "**********": "No more moves can be played if the game is over."
 },
 {
  "**********": "Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return \"Draw\". If there are still movements to play return \"Pending\"."
 },
 {
  "**********": "You can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]Output: \"A\"Explanation: A wins, they always play first.Example 2:"
 },
 {
  "**********": "Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]Output: \"B\"Explanation: B wins.Example 3:"
 },
 {
  "**********": "Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]Output: \"Draw\"Explanation: The game ends in a draw since there are no moves to make."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= moves.length <= 9"
 },
 {
  "**********": "moves[i].length == 2"
 },
 {
  "**********": "0 <= rowi, coli <= 2"
 },
 {
  "**********": "There are no repeated elements on moves."
 },
 {
  "**********": "moves follow the rules of tic tac toe."
 },
 {
  "**********": "**********************************************************1281. Subtract the Product and Sum of Digits of an Integer"
 },
 null,
 {
  "**********": "**********************************************************Given an integer number n, return the difference between the product of its digits and the sum of its digits."
 },
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 234Output: 15 Explanation: Product of digits = 2 * 3 * 4 = 24 Sum of digits = 2 + 3 + 4 = 9 Result = 24 - 9 = 15Example 2:"
 },
 {
  "**********": "Input: n = 4421Output: 21Explanation: Product of digits = 4 * 4 * 2 * 1 = 32 Sum of digits = 4 + 4 + 2 + 1 = 11 Result = 32 - 11 = 21"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 10^5"
 },
 {
  "**********": "*****************************************************1287. Element Appearing More Than 25% In Sorted Array"
 },
 null,
 {
  "**********": "*****************************************************Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: arr = [1,2,2,6,6,6,6,7,10]Output: 6Example 2:"
 },
 {
  "**********": "Input: arr = [1,1]Output: 1"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= arr.length <= 104"
 },
 {
  "**********": "0 <= arr[i] <= 105"
 },
 {
  "**********": "*******************************************************1290. Convert Binary Number in a Linked List to Integer"
 },
 null,
 {
  "**********": "*******************************************************Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number."
 },
 {
  "**********": "Return the decimal value of the number in the linked list."
 },
 {
  "**********": "The most significant bit is at the head of the linked list."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: head = [1,0,1]Output: 5Explanation: (101) in base 2 = (5) in base 10Example 2:"
 },
 {
  "**********": "Input: head = [0]Output: 0"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "The Linked List is not empty."
 },
 {
  "**********": "Number of nodes will not exceed 30."
 },
 {
  "**********": "Each node's value is either 0 or 1."
 },
 {
  "**********": "*********************************************1295. Find Numbers with Even Number of Digits"
 },
 null,
 {
  "**********": "*********************************************Given an array nums of integers, return how many of them contain an even number of digits."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [12,345,2,6,7896]Output: 2Explanation: 12 contains 2 digits (even number of digits). 345 contains 3 digits (odd number of digits). 2 contains 1 digit (odd number of digits). 6 contains 1 digit (odd number of digits). 7896 contains 4 digits (even number of digits). Therefore only 12 and 7896 contain an even number of digits.Example 2:"
 },
 {
  "**********": "Input: nums = [555,901,482,1771]Output: 1 Explanation: Only 1771 contains an even number of digits."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= nums.length <= 500"
 },
 {
  "**********": "1 <= nums[i] <= 105"
 },
 {
  "**********": "**********************************************************1299. Replace Elements with Greatest Element on Right Side"
 },
 null,
 {
  "**********": "**********************************************************Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1."
 },
 {
  "**********": "After doing so, return the array."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: arr = [17,18,5,4,6,1]Output: [18,6,6,6,1,-1]Explanation: - index 0 --> the greatest element to the right of index 0 is index 1 (18).- index 1 --> the greatest element to the right of index 1 is index 4 (6).- index 2 --> the greatest element to the right of index 2 is index 4 (6).- index 3 --> the greatest element to the right of index 3 is index 4 (6).- index 4 --> the greatest element to the right of index 4 is index 5 (1).- index 5 --> there are no elements to the right of index 5, so we put -1.Example 2:"
 },
 {
  "**********": "Input: arr = [400]Output: [-1]Explanation: There are no elements to the right of index 0."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= arr.length <= 104"
 },
 {
  "**********": "1 <= arr[i] <= 105"
 },
 {
  "**********": "*******************************************1304. Find N Unique Integers Sum up to Zero"
 },
 null,
 {
  "**********": "*******************************************Given an integer n, return any array containing nunique integers such that they add up to 0."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 5Output: [-7,-1,1,3,4]Explanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].Example 2:"
 },
 {
  "**********": "Input: n = 3Output: [-1,0,1]Example 3:"
 },
 {
  "**********": "Input: n = 1Output: [0]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= n <= 1000"
 },
 {
  "**********": "*****************************************************1309. Decrypt String from Alphabet to Integer Mapping"
 },
 null,
 {
  "**********": "*****************************************************You are given a string s formed by digits and '#'. We want to map s to English lowercase characters as follows:"
 },
 {
  "**********": "Characters ('a' to 'i') are represented by ('1' to '9') respectively."
 },
 {
  "**********": "Characters ('j' to 'z') are represented by ('10#' to '26#') respectively."
 },
 {
  "**********": "Return the string formed after mapping."
 },
 {
  "**********": "The test cases are generated so that a unique mapping will always exist."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"10#11#12\"Output: \"jkab\"Explanation: \"j\" -> \"10#\" , \"k\" -> \"11#\" , \"a\" -> \"1\" , \"b\" -> \"2\".Example 2:"
 },
 {
  "**********": "Input: s = \"1326#\"Output: \"acz\""
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 1000"
 },
 {
  "**********": "s consists of digits and the '#' letter."
 },
 {
  "**********": "s will be a valid string such that mapping is always possible."
 },
 {
  "**********": "****************************************1313. Decompress Run-Length Encoded List"
 },
 null,
 {
  "**********": "****************************************We are given a list nums of integers representing a list compressed with run-length encoding."
 },
 {
  "**********": "Consider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0).  For each such pair, there are freq elements with value val concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list."
 },
 {
  "**********": "Return the decompressed list."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [1,2,3,4]Output: [2,4,4,4]Explanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].The second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].At the end the concatenation [2] + [4,4,4] is [2,4,4,4].Example 2:"
 },
 {
  "**********": "Input: nums = [1,1,2,3]Output: [1,3,3]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "2 <= nums.length <= 100"
 },
 {
  "**********": "nums.length % 2 == 0"
 },
 {
  "**********": "1 <= nums[i] <= 100"
 },
 {
  "**********": "********************************************************1317. Convert Integer to the Sum of Two No-Zero Integers"
 },
 null,
 {
  "**********": "********************************************************No-Zero integer is a positive integer that does not contain any 0 in its decimal representation."
 },
 {
  "**********": "Given an integer n, return a list of two integers[A, B]where:"
 },
 {
  "**********": "A and B are No-Zero integers."
 },
 {
  "**********": "A + B = n"
 },
 {
  "**********": "The test cases are generated so that there is at least one valid solution. If there are many valid solutions you can return any of them."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: n = 2Output: [1,1]Explanation: A = 1, B = 1. A + B = n and both A and B do not contain any 0 in their decimal representation.Example 2:"
 },
 {
  "**********": "Input: n = 11Output: [2,9]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "2 <= n <= 104"
 },
 {
  "**********": "***********************1323. Maximum 69 Number"
 },
 null,
 {
  "**********": "***********************You are given a positive integer num consisting only of digits 6 and 9."
 },
 {
  "**********": "Return the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6)."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: num = 9669Output: 9969Explanation: Changing the first digit results in 6669.Changing the second digit results in 9969.Changing the third digit results in 9699.Changing the fourth digit results in 9666.The maximum number is 9969.Example 2:"
 },
 {
  "**********": "Input: num = 9996Output: 9999Explanation: Changing the last digit 6 to 9 results in the maximum number.Example 3:"
 },
 {
  "**********": "Input: num = 9999Output: 9999Explanation: It is better not to apply any change."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= num <= 104"
 },
 {
  "**********": "num consists of only 6 and 9 digits."
 },
 {
  "**********": "********************************1331. Rank Transform of an Array"
 },
 null,
 {
  "**********": "********************************Given an array of integers arr, replace each element with its rank."
 },
 {
  "**********": "The rank represents how large the element is. The rank has the following rules:"
 },
 {
  "**********": "Rank is an integer starting from 1."
 },
 {
  "**********": "The larger the element, the larger the rank. If two elements are equal, their rank must be the same."
 },
 {
  "**********": "Rank should be as small as possible."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: arr = [40,10,20,30]Output: [4,1,2,3]Explanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.Example 2:"
 },
 {
  "**********": "Input: arr = [100,100,100]Output: [1,1,1]Explanation: Same elements share the same rank.Example 3:"
 },
 {
  "**********": "Input: arr = [37,12,28,9,100,56,80,5,12]Output: [5,3,4,2,8,6,7,1,3]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= arr.length <= 105"
 },
 {
  "**********": "-109 <= arr[i] <= 109"
 },
 {
  "**********": "*************************************1332. Remove Palindromic Subsequences"
 },
 null,
 {
  "**********": "*************************************You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s."
 },
 {
  "**********": "Return the minimum number of steps to make the given string empty."
 },
 {
  "**********": "A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous."
 },
 {
  "**********": "A string is called palindrome if is one that reads the same backward as well as forward."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: s = \"ababa\"Output: 1Explanation: s is already a palindrome, so its entirety can be removed in a single step.Example 2:"
 },
 {
  "**********": "Input: s = \"abb\"Output: 2Explanation: \"abb\" -> \"bb\" -> \"\". Remove palindromic subsequence \"a\" then \"bb\".Example 3:"
 },
 {
  "**********": "Input: s = \"baabb\"Output: 2Explanation: \"baabb\" -> \"b\" -> \"\". Remove palindromic subsequence \"baab\" then \"b\"."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "1 <= s.length <= 1000"
 },
 {
  "**********": "s[i] is either 'a' or 'b'."
 },
 {
  "**********": "************************************1337. The K Weakest Rows in a Matrix"
 },
 null,
 {
  "**********": "************************************You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). The soldiers are positioned in front of the civilians. That is, all the 1's will appear to the left of all the 0's in each row."
 },
 {
  "**********": "A row i is weaker than a row j if one of the following is true:"
 },
 {
  "**********": "The number of soldiers in row i is less than the number of soldiers in row j."
 },
 {
  "**********": "Both rows have the same number of soldiers and i < j."
 },
 {
  "**********": "Return the indices of the k weakest rows in the matrix ordered from weakest to strongest."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: mat = [[1,1,0,0,0], [1,1,1,1,0], [1,0,0,0,0], [1,1,0,0,0], [1,1,1,1,1]], k = 3Output: [2,0,3]Explanation: The number of soldiers in each row is: - Row 0: 2 - Row 1: 4 - Row 2: 1 - Row 3: 2 - Row 4: 5 The rows ordered from weakest to strongest are [2,0,3,1,4].Example 2:"
 },
 {
  "**********": "Input: mat = [[1,0,0,0], [1,1,1,1], [1,0,0,0], [1,0,0,0]], k = 2Output: [0,2]Explanation: The number of soldiers in each row is: - Row 0: 1 - Row 1: 4 - Row 2: 1 - Row 3: 1 The rows ordered from weakest to strongest are [0,2,3,1]."
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "m == mat.length"
 },
 {
  "**********": "n == mat[i].length"
 },
 {
  "**********": "2 <= n, m <= 100"
 },
 {
  "**********": "1 <= k <= m"
 },
 {
  "**********": "matrix[i][j] is either 0 or 1."
 },
 {
  "**********": "************************************************1342. Number of Steps to Reduce a Number to Zero"
 },
 null,
 {
  "**********": "************************************************Given an integer num, return the number of steps to reduce it to zero."
 },
 {
  "**********": "In one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: num = 14Output: 6Explanation: Step 1) 14 is even; divide by 2 and obtain 7. Step 2) 7 is odd; subtract 1 and obtain 6.Step 3) 6 is even; divide by 2 and obtain 3. Step 4) 3 is odd; subtract 1 and obtain 2. Step 5) 2 is even; divide by 2 and obtain 1. Step 6) 1 is odd; subtract 1 and obtain 0.Example 2:"
 },
 {
  "**********": "Input: num = 8Output: 4Explanation: Step 1) 8 is even; divide by 2 and obtain 4. Step 2) 4 is even; divide by 2 and obtain 2. Step 3) 2 is even; divide by 2 and obtain 1. Step 4) 1 is odd; subtract 1 and obtain 0.Example 3:"
 },
 {
  "**********": "Input: num = 123Output: 12"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "0 <= num <= 106"
 },
 {
  "**********": "**********1. Two Sum"
 },
 null,
 {
  "**********": "**********Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target."
 },
 {
  "**********": "You may assume that each input would have exactly one solution, and you may not use the same element twice."
 },
 {
  "**********": "You can return the answer in any order."
 },
 null,
 {
  "**********": "Example 1:"
 },
 {
  "**********": "Input: nums = [2,7,11,15], target = 9Output: [0,1]Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].Example 2:"
 },
 {
  "**********": "Input: nums = [3,2,4], target = 6Output: [1,2]Example 3:"
 },
 {
  "**********": "Input: nums = [3,3], target = 6Output: [0,1]"
 },
 {
  "**********": "Constraints:"
 },
 {
  "**********": "2 <= nums.length <= 104"
 },
 {
  "**********": "-109 <= nums[i] <= 109"
 },
 {
  "**********": "-109 <= target <= 109"
 },
 {
  "**********": "Only one valid answer exists."
 },
 {
  "**********": "Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?"
 }
]